<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main" coord="1,192.72,99.04,226.26,12.91">Qanda and the Catalyst Architecture</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName coords="1,180.72,131.03,74.22,10.76"><forename type="first">Pranav</forename><surname>Anand</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">The MITRE Corporation Bedford</orgName>
								<address>
									<postCode>01730</postCode>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName coords="1,267.06,131.03,82.85,10.76"><forename type="first">David</forename><surname>Anderson</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">The MITRE Corporation Bedford</orgName>
								<address>
									<postCode>01730</postCode>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName coords="1,362.02,131.03,64.14,10.76;1,426.36,131.17,1.40,5.70"><forename type="first">John</forename><surname>Burger</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">The MITRE Corporation Bedford</orgName>
								<address>
									<postCode>01730</postCode>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName coords="1,156.96,148.07,67.15,10.76"><forename type="first">John</forename><surname>Griffith</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">The MITRE Corporation Bedford</orgName>
								<address>
									<postCode>01730</postCode>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName coords="1,236.11,148.07,58.51,10.76"><forename type="first">Marc</forename><surname>Light</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">The MITRE Corporation Bedford</orgName>
								<address>
									<postCode>01730</postCode>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName coords="1,306.62,148.07,66.06,10.76"><forename type="first">Scott</forename><surname>Mardis</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">The MITRE Corporation Bedford</orgName>
								<address>
									<postCode>01730</postCode>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName coords="1,384.56,148.07,67.25,10.76"><forename type="first">Alex</forename><surname>Morgan</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">The MITRE Corporation Bedford</orgName>
								<address>
									<postCode>01730</postCode>
									<region>MA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main" coord="1,192.72,99.04,226.26,12.91">Qanda and the Catalyst Architecture</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">A7F4E3E824AE5B09FF5EC41C4599CDC9</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-08-05T14:58+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<facsimile>
		<surface n="1" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="2" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="3" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="4" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="5" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
	</facsimile>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Introduction to Qanda and Catalyst</head><p>Qanda is MITRE's entry into the question-answering (QA) track of the TREC conference <ref type="bibr" coords="1,177.41,244.36,110.77,8.97" target="#b4">(Voorhees &amp; Harman 2002)</ref>. This year, Qanda was re-engineered to use a new architecture for human language technology called Catalyst, developed at MITRE for the DARPA TIDES program.</p><p>The Catalyst architecture was chosen because it was specifically designed for fast processing and for combining the strengths of Information Retrieval (IR) and Natural Language Processing (NLP) into a single framework. These technology fields are critical to the development of QA systems.</p><p>The current Qanda implementation serves as a prototype for developing QA systems in the Catalyst architecture. This paper serves as an introduction to Catalyst and the Qanda implementation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>What is Catalyst?</head><p>Catalyst is a framework for creating and experimenting with Human Language Technology (HLT) systems. It attempts to address several problems typical of current approaches to component-based HLT systems. The principal problems that Catalyst is designed to ameliorate are these:</p><p>• Systems do not scale easily to handle today's information processing needs. Systems are needed to process human language very quickly or in very large amounts.</p><p>• Experimenting with a variety of potential system configurations is difficult because each pair-wise component interaction typically requires specialized integration code for smooth operation.</p><p>The approach that we are using in the Catalyst framework to address these problems is to combine standoff annotation and dataflow.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Standoff Annotation</head><p>The Catalyst data model, like those of both the TIPSTER and GATE architectures <ref type="bibr" coords="1,154.87,637.24,137.39,8.97;1,54.00,648.16,22.88,8.97" target="#b0">(Cunningham, Wilks, &amp; Gaizauskas 1996;</ref><ref type="bibr" coords="1,79.64,648.16,63.85,8.97" target="#b1">Grishman 1996)</ref>, is annotation based. A signal (text, audio, etc.) is augmented with annotations that mark up portions of the signal with supplemental or derived information.</p><p>Catalyst annotations are standoff (versus inline) which means that the underlying signal is unmodified and annotations are maintained and communicated separate from the signal. By separating the signal from the annotations and annotations of different types from each other, Catalyst is able to automatically construct customized streams of annotation for each component in a system. The set of annotations, attributes and their names can all be transparently modified between each language processing component without modifying any component code or inserting additional scripts.</p><p>Every standoff annotation has an annotation type identifier, a start position, an end position, and zero or more attributes. The attributes are named fields that provide information derived from or associated with the annotated text. For example, a tokenizer might emit word annotations, with text, stem and part-of-speech attributes. The start and end of each such annotation would indicate where in the text the tokenizer found the words.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Dataflow Processing</head><p>In order to support distributed, scalable systems, Catalyst is based on a dataflow model of language processing components. We refer to these components as language processors (LPs). The dataflow model allows us to describe an HLT system directly in terms of the data dependencies between LPs. Furthermore, we are able to use the natural ordering properties of the standoff annotation indices to synchronize the operation of the various components.</p><p>Each LP in a Catalyst system is connected to others by annotation streams consisting of a flow of standoff annotations serialized according to the following predicate.</p><formula xml:id="formula_0" coords="1,319.56,564.26,238.63,51.01">A1 &lt; A2 if      A1.start &lt; A2.start ∨ ((A1.start = A2.start) ∧ (A1.end &gt; A2.end)) ∨ ((A1.start = A2.start) ∧ (A1.end = A2.end) ∧ (A1.annotation-type &lt; A2.annotation-type))</formula><p>As a node in a dataflow network, each LP has a declaration that defines its annotation input requirements and annotation outputs. A system declaration identifies the required language processors and the desired annotation stream connections between them (connections that satisfy each LP's input requirements). From these declarations Catalyst can arrange to deliver to each component only the annotations that are expected. Thus, components do not need to forward annotations unrelated to their specific function. For example, a sentence tagger may consume the bf word annotations produced by the tokenizer described above, and emit annotations indicating the boundaries of sentences. The sentence tagger need not copy the words to its output-if a third component requires both sentences and words, Catalyst will arrange to deliver the outputs of the tokenizer and the sentence tagger, suitably merged.</p><p>Catalyst's dataflow approach to building HLT system has a number of advantages.</p><p>• Error dependencies between components are limited to the precisely specified data dependencies.</p><p>• By using dedicated peer-to-peer channels Catalyst eliminates the cost of parsing and generating generic annotation interchange formats (such as XML) between independently constructed components.</p><p>• Component developers may work directly with an annotation model, rather that with particular data interchange formats. (Catalyst will support the exchange of data in XML for system I/O and for use with components not prepared for direct use in a Catalyst system.)</p><p>• A system can be run on a single machine or distributed across many. Individual components can be replicated to increase throughput.</p><p>• Component code can be simplified because the data presented is always consistent with the LP specification.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Distributability</head><p>Catalyst annotation streams are transported over sockets and can be connected between processes on many machines, permitting a wide range of processing strategies for optimizing system performance without having to rewrite component code. Once properly working on a single host, distributing a system across many machines requires only starting a server on each machine and editing a few lines in the system configuration file.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Control</head><p>A network of Catalyst servers exchange information for the purpose of creating and maintaining Catalyst-based systems.</p><p>Connections are negotiated by servers and then handed-off to component processes. A single script, compiled from a static dataflow description of the system, works in concert with the servers to create each system. Servers also route and deliver control commands to each language processor.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Logging and Monitoring</head><p>A multi-process, distributed system can be difficult to debug and maintain. To assist component and system developers in this regard, Catalyst has both distributed logging and distributed monitoring capabilities. The Catalyst log capability allows logger processes to collect information from some or all of the processes in a Catalyst system. Logging information includes events such as when language processors are stopped or started, user log messages, command events, errors, etc. Logs may be created at the same time the system is instantiated or may be added later as needed. Multiple loggers can be created simultaneously to record several views of the log at different levels of detail and can be used to create logs at multiple destinations.</p><p>The Catalyst monitor is used to examine the configuration and state of a Catalyst system. Using the monitor, a component or system developer can obtain snapshots of the current system configuration and track the flow of data through a system. The monitor provides information such as the list of current running components, the connecting annotation streams, the amount of information buffered with the system, the current indices for the various streams, etc. Debugging multicomponent systems such as Qanda requires a facility to examine the global system state easily. The monitor is an important tool for quickly diagnosing component interaction problems and identifying performance bottlenecks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Information Retrieval in Catalyst</head><p>In addition to addressing some of the general problems of HLT system construction, Catalyst is also an experiment in developing a framework for combining NLP and IR in a single system. Standoff token annotations, grouped by term, form the basis of an inverted index for terms in a large corpus, similar to those used by traditional IR engines. By extending this usage to all other types of annotation, Catalyst permits the development of fast information retrieval techniques that query over NLP-generated products (see examples below).</p><p>Catalyst's dataflow model, combined with flexible inverted index streams, makes it possible to develop systems that can utilize both pre-and post-index NLP to improve the speed of query responses. Also, retrieval engines can be built that directly answer complex queries as needed for question answering (e.g., retrieve all paragraphs containing a person and one of terms A or B).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Implementing Qanda using Catalyst</head><p>Our previous TREC efforts have used inline-XML pipeline architectures, where all components monotonically added XML markup to retrieved documents. This approach had a number of problems:</p><p>• Components downstream had to understand (or at least parse) all upstream annotations, in order to ensure that these earlier annotations were properly replicated on output.</p><p>• This led to an inflation of the markup on documents: Often the final documents comprised 99% markup and 1% underlying character data.</p><p>• Some components' only purpose was to rewrite markup to make it more palatable to downstream components.</p><p>• It is difficult to parallelize such an architecture.</p><p>Our current Catalyst-based architecture suffers from none of these problems. Every component is delivered only the annotations that it requires to do its job. If a component is producing annotations that no other component currently  requires, Catalyst quietly drops them on the floor.<ref type="foot" coords="3,256.44,431.08,3.48,6.28" target="#foot_0">1</ref> If necessary, we can instruct Catalyst to map between different annotation types in order to accommodate differences in the natural representations of different components.</p><p>Catalyst also allows us to lay the system out in a more natural manner than a single pipeline. Figure <ref type="figure" coords="3,242.78,487.72,5.03,8.97" target="#fig_1">1</ref> shows our TREC system, which is naturally expressed as a directed graph. Note that many components do not need to communicate with each other, even indirectly, and can thus run in parallel, e.g., most of the entity taggers. Although we have not yet taken advantage of it, Catalyst will allow us to run language processors on different machines, even replicating slower components in order to increase throughput.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Using Catalyst</head><p>Working with Catalyst entails developing Catalyst-enabled components and assembling them into a system. Catalyst is designed to simplify this second task. First we describe the general way in which Catalyst systems are constructed; next we show two possible paths for integrating existing technology with Catalyst.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Building a System in Catalyst</head><p>Figure <ref type="figure" coords="3,348.33,452.20,5.03,8.97">2</ref> shows how the major components of Catalyst (the library, the server and the configuration compilers) are used in creating a running system. A configuration file is written for each language processing component (LP). It specifies which annotation streams it is able to process and which it generates. A component compiler transforms the configuration file into header files and other static information that are used to create each Catalyst-enabled executable. A system configuration file, referring to LP configuration files, defines which LPs are needed in a system and the stream connections that are required between the LPs. The system compiler transforms the system configuration file into a startup script that is used to instantiate the system. The script (presently a PERL 5.0 script) communicates only with Catalyst servers, whose function is to create the operating system processes that will contain the LPs, establish connections between them, and forward configuration and control information from the script to each process.</p><p>The Catalyst library (linked into each component process) handles annotation communication between components and passes control information to and from the servers. The library can merge annotations from many different components and produce a single annotation stream specialized </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Catalyst Library</head><p>Figure <ref type="figure" coords="4,83.01,327.40,3.90,8.97">2</ref>: How Catalyst Builds a System-Configuration compilers transform configuration files into header, data, and script files that are used to create language processors[LPs] and systems. A compiled start-up script uses the network of Catalyst servers to create a running system. The system, once started, passes annotations via peer-to-peer communication managed by the Catalyst library.</p><p>to each component's input declaration. Similarly, a single stream of output from a component can be broken down into its constituent annotations and attributes and delivered piece-meal to many destinations. In this way, Catalyst delivers to each component, the precise set of annotations required by the component's declaration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Integrating with Catalyst</head><p>There are two basic ways of integrating existing components with Catalyst: writing a Catalyst wrapper process and using the Catalyst API. The purpose of a Catalyst wrapper process is to convert the Catalyst annotations streams to and from a data format that an existing black box component uses. The Catalyst API, of course, provides direct access to all of Catalyst's features and provides maximum benefit.</p><p>A wrapper process allows one to connect existing technology into Catalyst without having to modify the component code. This is the only choice for components for which the code is unavailable. It would provide the advantage of delivering a precise set of annotations to the wrapped component but it would suffer from the cost of transformation to and from the appropriate interchange format. Also, transforming annotations from standoff to inline formats and back again (as most component technologies would require) can be difficult. The Catalyst project is, however, planning direct support for inline annotations in XML to facilitate integration via wrapper processes.</p><p>The Catalyst API defines a standoff annotation model and provides methods for sharing data via annotation streams.</p><p>Standoff annotations allow for overlap in ways that cannot be constructed in an inline format such as XML, permitting, for example, components to output many possibly overlapping noun phrase bracketings or answer candidates. Additionally, a component can receive an annotation stream that contains the combined outputs of several components that all share the same task (e.g., it is simple to develop a component that looks at N different tagger outputs and selects the best tags by combining the results).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Future Directions for Qanda within Catalyst</head><p>Currently, work is proceeding within the Catalyst project on two important technologies: Persistent annotation archives and annotation indexes. The goal of archiving annotations is to store and then later reuse a stream of annotations. For instance, the tokenization and entity tagging in Qanda could be done on the entire TREC corpus ahead of time, then pulled from an archive at question-answering time. Consumer language processors will not be aware that their input annotations are being read from disk rather than being created by a "live" producer. The goal of annotation indexing is to invert arbitrary text "containers", not just documents or paragraphs. Thus, one might query for archived Location entities containing the term Berlin, to answer a question such as When did the Berlin wall come down?. In addition, we want to index all annotations not just on the terms they contain, but on all of their other contained annotations as well. This is similar to the work of <ref type="bibr" coords="5,105.07,68.08,82.47,8.97" target="#b3">(Prager et al. 2000;</ref><ref type="bibr" coords="5,190.65,68.08,71.44,8.97" target="#b2">Kim et al. 2001)</ref> but intended to be more general and comprehensive. With both of these capabilities in place, we imagine that complex queries might be formulated, such as:</p><p>Retrieve Sentences containing Dates and also containing the term wall and also containing Location annotations containing the term Berlin.</p><p>We believe that such targeted queries will allow for very fast and accurate question answering systems. Optimizing such queries is admittedly complex, however, as is determining appropriate scoring mechanisms. Deciding how best to use archived coreference information is also an issue. Nonetheless, we believe that Catalyst provides a valuable framework for such sophisticated language processing systems.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1" coords="3,54.00,391.72,503.72,8.97;3,54.00,402.64,32.96,8.97"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Qanda as a Catalyst System-Wide arcs indicate file system IO, narrow arcs are lightweight Catalyst annotation streams.</figDesc></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0" coords="3,70.08,675.96,221.95,8.07;3,54.00,685.92,238.42,8.07;3,54.00,695.88,108.39,8.07"><p>Of course, the preferred behavior would be for the component to neglect computing such annotations in the first place, but at least they are not further processed.</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct coords="5,59.04,268.36,233.15,8.97;5,59.04,279.28,22.64,8.97;5,104.12,279.28,188.24,8.97;5,59.04,290.32,49.84,8.97;5,132.64,290.32,159.68,8.97;5,59.04,301.24,233.40,8.97;5,59.04,312.16,151.34,8.97" xml:id="b0">
	<analytic>
		<title level="a" type="main" coord="5,104.12,279.28,188.24,8.97;5,59.04,290.32,45.69,8.97">GATE -a general architecture for text engineering</title>
		<author>
			<persName coords=""><forename type="first">H</forename><surname>Cunningham</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Y</forename><surname>Wilks</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">R</forename><surname>Gaizauskas</surname></persName>
		</author>
		<ptr target="http://citeseer.nj.nec.com/43097.html" />
	</analytic>
	<monogr>
		<title level="m" coord="5,149.79,290.32,142.54,8.97;5,59.04,301.24,228.34,8.97">Proceedings of the 16th Conference on Computational Linguistics (COLING96)</title>
		<meeting>the 16th Conference on Computational Linguistics (COLING96)</meeting>
		<imprint>
			<date type="published" when="1996">1996</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="5,59.04,325.84,233.46,8.97;5,59.04,336.88,196.58,8.97" xml:id="b1">
	<monogr>
		<title level="m" type="main" coord="5,143.88,325.84,148.62,8.97;5,59.04,336.88,35.29,8.97">Tipster architecture design document version 2</title>
		<author>
			<persName coords=""><forename type="first">R</forename><surname>Grishman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996">1996</date>
		</imprint>
		<respStmt>
			<orgName>DARPA TIPSTER</orgName>
		</respStmt>
	</monogr>
	<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct coords="5,59.04,350.56,233.24,8.97;5,59.04,361.48,233.24,8.97;5,59.04,372.40,233.36,8.97;5,59.04,383.44,118.05,8.97" xml:id="b2">
	<analytic>
		<title level="a" type="main" coord="5,251.75,350.56,40.53,8.97;5,59.04,361.48,233.24,8.97;5,59.04,372.40,49.96,8.97">MAYA: A fast question-answering system based on a predictive answer indexer</title>
		<author>
			<persName coords=""><forename type="first">H</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">K</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">G</forename><forename type="middle">G</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">J</forename><surname>Seo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m" coord="5,131.32,372.40,161.08,8.97;5,59.04,383.44,113.54,8.97">Proceedings of the Workshop on Open-Domain Question Answering</title>
		<meeting>the Workshop on Open-Domain Question Answering</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="5,59.04,397.00,233.46,8.97;5,59.04,408.04,233.34,8.97;5,59.04,418.96,114.24,8.97" xml:id="b3">
	<analytic>
		<title level="a" type="main" coord="5,59.04,408.04,178.21,8.97">Question-answering by predictive annotation</title>
		<author>
			<persName coords=""><forename type="first">J</forename><surname>Prager</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">E</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">A</forename><surname>Coden</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">D</forename><surname>Radev</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m" coord="5,256.19,408.04,36.19,8.97;5,59.04,418.96,75.49,8.97">Proceedings of ACM SIGIR</title>
		<meeting>ACM SIGIR<address><addrLine>Athens</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="5,59.04,432.64,233.33,8.97;5,59.04,443.56,233.53,8.97;5,59.04,454.60,118.28,8.97" xml:id="b4">
	<monogr>
		<author>
			<persName coords=""><forename type="first">E</forename><surname>Voorhees</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">D</forename><surname>Harman</surname></persName>
		</author>
		<ptr target="http://trec.nist.gov/pubs.html" />
		<title level="m" coord="5,256.18,432.64,36.19,8.97;5,59.04,443.56,228.83,8.97">Proceedings of the Tenth Text Retrieval Conference (TREC-10)</title>
		<meeting>the Tenth Text Retrieval Conference (TREC-10)</meeting>
		<imprint>
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
