<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main" coord="1,126.84,91.00,343.23,12.93">IBM SpamGuru on the TREC 2005 Spam Track</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName coords="1,55.44,142.22,69.54,8.95"><forename type="first">Richard</forename><surname>Segal</surname></persName>
							<email>rsegal@us.ibm.com</email>
							<affiliation key="aff0">
								<orgName type="institution">IBM T.J. Watson Research Center</orgName>
								<address>
									<postCode>10532</postCode>
									<settlement>Hawthorne</settlement>
									<region>NY</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main" coord="1,126.84,91.00,343.23,12.93">IBM SpamGuru on the TREC 2005 Spam Track</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">BEEE86F89D1BF4996798E478E7EDD8E7</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-08-05T15:02+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>IBM Research is developing an enterpriseclass anti-spam filter as part of our overall strategy of attacking the Spam problem on multiple fronts. Our anti-spam filter, SpamGuru, mirrors this philosophy by incorporating several different filtering technologies and intelligently combining their output to produce a single spamminess rating. The use of multiple algorithms improves the system's effectiveness and makes it more difficult for spammers to attack. While our overall performance was strong, our results did uncover some flaws and weaknesses in our existing implementation. Our latest code, with these weaknesses addressed as well as other enhancements, produces results on par with the best performing classifiers reported for TREC 2005 on the public corpus.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<facsimile>
		<surface n="1" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="2" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="3" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="4" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="5" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="6" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
	</facsimile>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>IBM Research is developing an enterprise-class antispam filter as part of our overall strategy of attacking the Spam problem on multiple fronts. Our anti-spam filter, SpamGuru, mirrors this philosophy by incorporating several different filtering technologies and intelligently combining their output to produce a single spamminess rating or score for each incoming message. The use of multiple algorithms improves the system's effectiveness and makes it more difficult for spammers to attack. While a spammer may defeat any single algorithm, SpamGuru can rely on its remaining algorithms to maintain a high-degree of effectiveness.</p><p>The IBM Research submission to the TREC 2005 spam track used the SpamGuru anti-spam framework to evaluate three experimental anti-spam technologies that are under development. The first is LNB (Less-Naïve Bayes), an extension of the ubiquitous Naïve-Bayesian text classifier that relaxes the independence assumption by modeling some of the dependencies between attributes. The second is SMTP Path Analysis, an algorithm that classifies incoming mail based on the servers used to deliver the message. The third technology is a classifier aggregation algorithm that uses the Nelder-Mead nonlinear optimizer to dynamically select weights for combining the LNB and SMTP path analysis classifiers into a single prediction.</p><p>The next section presents an overview of the SpamGuru anti-spam framework. The following sections details each of the three algorithms used in our evaluation. Section 6 presents our results on the TREC 2005 Spam Track, analyzes our performance, and discusses what we have learned that has allowed us to substantially improve our overall system. Finally, Section 7 concludes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">SpamGuru Overview</head><p>SpamGuru is a server-based framework for anti-spam filtering <ref type="bibr" coords="1,345.49,417.81,83.51,9.96" target="#b5">(Segal et al., 2004)</ref>. The SpamGuru framework provides the plumbing needed for a complete anti-spam solution. The SpamGuru server can communicate with a variety of SMTP servers and e-mail gateways to provide anti-spam services.</p><p>The work of labeling incoming messages is done using the SpamGuru Filtering Pipeline. The filtering pipeline consists of one or more pluggable anti-spam modules. SpamGuru processes each incoming e-mail by passing it from one anti-spam module to the next. Each module analyzes the message and optionally assigns it a score based on its prediction of how likely the message is to be spam. The last module in the chain is always an aggregator that is responsible for combining the results from the individual classifiers into a single score. That score is then used by SpamGuru to decide on whether or not to flag the message as spam.</p><p>The SpamGuru Filtering Pipeline was instantiated for TREC 2005 as follows. Our primary TREC submission consisted of a MIME decoder, the LNB classifier, the SMTP Path Analysis classifier, and our optimization-based classifier aggregator. For our other submissions, we submitted each classification technology individually so that we could evaluate each indi-vidual algorithm as well as our aggregation technology. Our second submission therefore used just the SMTP Path analysis module. Our third submission consisted of the MIME decoder and the LNB classifier. Our second submission does not consider the text in the body of a message and therefore does not benefit from decoding the message's constituent MIME parts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Less Naïve Bayesian</head><p>Traditional Naïve Bayesian filters make the assumption that words are conditionally independent given the target classification and use that assumption to derive an otherwise mathematically sound formula for the probability of a document being a member of that class <ref type="bibr" coords="2,80.51,248.97,58.90,9.96" target="#b3">(Lewis, 1998)</ref>. However, it is manifestly true that this conditional independence assumption does not hold. The word "inkjet" appears much more often in spam documents that also contain the word "printer" than in randomly selected spam documents. The goal of Less Naïve Bayesian (LNB) is to produce a classifier that is more accurate than simple Naïve-Bayes by taking the dependencies among features into account.</p><p>The LNB algorithm is not strictly Bayesian. LNB takes the approach of a discriminative classifier in which probabilities are replaced by a single weight that represents a word's relative spamminess. As is typically done with discriminant-style classifiers, the word weights are adjusted as new training examples arrive to ensure that the new training example is categorized correctly. What is unique is that LNB adjusts its weights in a manner that makes the algorithm less sensitive to feature dependencies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">SMTP Path Analysis</head><p>SMTP Path Analysis categorizes incoming spam based on the sequence of gateways that delivered the message <ref type="bibr" coords="2,77.03,542.01,81.59,9.96" target="#b2">(Leiba et al., 2005)</ref>. The intuition behind the algorithm is that mail sent through the same or similar IP addresses are likely to share the same classifications.</p><p>The SMTP protocol specifies that each SMTP relay used to send an email message must add at the beginning of the message's headers a "received" line that contains (at least) information about the SMTP server receiving the message, from where the server received the message, and a time-stamp stating when the header was added. These header lines, taken together, provide a trace of the SMTP path used to deliver a message.</p><p>SMTP Path Analysis learns the spamminess or good-ness of IP addresses by analyzing the past history of e-mail sent using that IP address. When training, the algorithm extracts from each message the sequence of IP addresses that mail supposedly took to get to the recipient and collects statistics about the spam and good e-mail sent through each IP address. During classification, the algorithm extracts the IP address sequence from the target message and yields a score for that message based on the IP addresses of the gateways supposedly used to deliver the message. The algorithm looks at no other information; in particular, it does not otherwise analyze the content of the message or consider any domain information.</p><p>The probability that mail passing through any previously-seen IP address is spam is estimated, when possible, based on the frequency of spam in e-mail previously sent by that host. However, due to dynamic IP addresses and other complexities of IP addresses, a substantial amount of e-mail originates from IP addresses for which we may have little to no data. We address this issue by combining statistics of the current IP address with those of "nearby" IP addresses whenever there is not sufficient data regarding the current IP address to make a reliable decision.</p><p>As described, SMTP Path Analysis is susceptible to spoofing. A spammer can easily add false received line headers to a message to make it appear to be sent through a reliable source. To address this problem, we establish a credibility value for each intermediate address, and if an address is not credible we partially ignore the remaining addresses.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Classifier Aggregation</head><p>SpamGuru employs an aggregate classifier to combine the results of each individual classifier into a single score that can be used to decide how each incoming message should be routed. Classifier aggregation provides two benefits. First, it improves classifier accuracy by combining the best features of multiple algorithms. Second, it improves the robustness of the overall system since a spammer trying to attack the system must defeat multiple anti-spam filtering technologies to defeat the entire system <ref type="bibr" coords="2,465.11,595.65,54.95,9.96" target="#b4">(Segal, 2005)</ref>.</p><p>Each classifier in SpamGuru rates the spamminess of incoming messages by returning a score from 0 to 1000. A score of 0 indicates that the message is almost certainly good, while a score of 1000 indicates that the message is almost certainly spam. The output of most classifiers can be scaled to fit this range.</p><p>The scores of several classifiers are combined by computing a single score from the scores of each individual classifier. There are several well-known methods for combining classifiers <ref type="bibr" coords="3,149.76,81.45,77.27,9.96" target="#b1">(Dietterich, 2000)</ref>. One option is to return the minimum score output by any of the classifiers. This method tags a message as spam only if all the classifiers return a score over a threshold provided by the user. That is, all the classifiers agree that the message is spam. The minimum score aggregator produces a very low false-positive rate since a legitimate message can only be misclassified as spam if all the algorithms incorrectly label the message as spam. On the other hand, its spam detection rate can be no better than the least effective classifier.</p><p>By experimentation, we found that the most successful way to combine classifiers was to use their unthresholded output scores as input to a super-classifier; a linear one typically worked well in practice. The linear super-classifier's score was a weighted sum of the scores of the constituent classifiers. The optimal values of the weights were established by using a Nelder-Mead nonlinear optimizer to minimize a penalty function that emphasized the relative importance of false positives and false negatives in the anti-spam domain. The optimization was performed using a sliding window of several thousand most recently labeled emails.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Results</head><p>Figure <ref type="figure" coords="3,87.37,398.49,4.98,9.96">1</ref> graphs SpamGuru's performance on each of the four TREC datasets. For comparison, each figure includes a classifier marked "Best*" that was constructed using the best results returned by any classifier at several representative false positive rates. Note, the hypothetical "Best*" classifier is likely to outperform all real classifiers as some classifiers perform better in different regions of the ROC curve.</p><p>SpamGuru's performed very well on the TM dataset, scoring at or just below the best classifier throughout the entire curve. It's performance was also very good for low misclassification rates on the MrX and SB datasets. However, SpamGuru's ROC curve drops far below the best classifiers for ham misclassification rates above 1%. In real-world use, poor results with a threshold that allows a high misclassification rate is not a problem as most users find false-positive rates above 1% unacceptable. It developing Spamguru, we have focused on achieving good performance with false positive rates at or below the 0.1% level. The strong performance of SpamGuru at a 0.1% false-positive rate and below is the direct result of these efforts. SpamGuru's weak performance at higher false positive rates suggests that a real issue may be lurking under the covers. With further investigation, we discovered a flaw that caused most of the issue with the MrX dataset. SpamGuru places a limit on the overall message size that it will attempt to classify. This is done to achieve good scalability and to protect against denial of service attacks. Messages above this threshold are assumed ham. The MrX dataset was unusual in that it had several spam messages above SpamGuru's size threshold, a problem we had not seen in during our testing on actual e-mail streams. It is possible that we had not seen this problem previously because SpamGuru is usually deployed in conjunction with anti-virus technology that eliminates most offensive large messages.</p><p>Figure <ref type="figure" coords="3,343.33,230.97,4.98,9.96">2</ref> shows SpamGuru's performance when long messages are truncated to meet its internal size limit. The improvement on this dataset is dramatic. SpamGuru performs close to or above the best reported performance through most of its ROC curve. Performance still does drop starting around 1% ham misclassification rate, but the drop is not nearly as significant as it was when SpamGuru assumed all large e-mail is legitimate.</p><p>The graphs in Figure <ref type="figure" coords="3,401.66,344.49,4.98,9.96">1</ref> also illustrate the performance of our aggregation technology and the constituent classifiers that were combined. Most of the system's accuracy comes from the performance of Less Naïve Bayes. As seen in the graphs, SMTP path analysis cannot provide the same level of spam detection provided by the best Bayesian filters. In our experience, the main value of SMTP path analysis is as an adjunct classifier that can improve performance when combined with a more powerful classifier. SMTP path analysis works well in this role as its predictions are based on structural data that are not available to the commonly used bag-of-words style anti-spam filters.</p><p>The value of SMTP path analysis and SpamGuru's aggregator can be seen on the Full and TM datasets. On both these datasets, the aggregator substantial improves SpamGuru's ROC curve. Interestingly, the aggregator provides this advantage on the full dataset despite a very poor showing of SMTP path analysis on the portions of the ROC curve in which the aggregator helped most.</p><p>While we did not expect SMTP Path Analysis to be competitive with the best spam filters, its accuracy was still considerably below our expectations. We ran several additional experiments to understand these results. We discovered that there was a bug in the parser that caused many IP addresses to be missed. Since our original submission, we have fixed this bug as well as made several improvements to Less Naïve Bayesian.  latest version of SpamGuru on the full dataset. The performance of SMTP path analysis dramatically improved as the result of the improved parsing. The new results are more in line with our expectations, SMTP path analysis works well but its performance is not sufficient for it to function as a standalone classifier.</p><p>These results also show a substantial improvement in Less Naïve Bayes. The new version of Less Naïve Bayes performs very close to the "Best*" classifier throughout its ROC curve. This new version has several upgrades, most notably an improved method for smoothing probabilities and better handling of pure wordswords that only appear in spam or only appear in ham. However, its strong performance provides the aggregator with very little room for improvement, even with a much improved SMTP Path Analysis algorithm.</p><p>The final experiment we performed was to evaluate whether our extension to Naïve Bayes provided any real benefit. Figure <ref type="figure" coords="4,398.42,638.61,4.98,9.96" target="#fig_1">4</ref> compares Less Naïve Bayesian to traditional Naïve Bayes with a geometric mean. The first Naïve-Bayesian implementation shown in the graph was created by disabling our extensions in our Less Naïve Bayesian code. As a result, this comparison is free from most biases that can be introduced by </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Conclusion</head><p>The SpamGuru entry to the TREC 2005 spam track performed very well. SpamGuru's results were consistently near the best when evaluated on low ham misclassification rates. We finished with the fourth lowest spam misclassification rate at the 0.1% ham misclassification level <ref type="bibr" coords="5,138.12,707.61,118.67,9.96" target="#b0">(Cormack &amp; Lynam, 2006)</ref>. Only the three variations of the Josef Stefan Institute's compression-based classifier performed better on this metric.</p><p>In previous work, we have evaluated our system only on ham misclassification rates at or below 0.1% as this is the region of greatest importance for end users.</p><p>Participating in TREC has taught us that considering ham misclassification rates above 1% can be useful in testing and debugging. While most anti-spam systems will never be used in production with such high false positive rates, the weaknesses show by SpamGuru in this region of the ROC curve have helped us uncover several flaws in our submission. When these errors were corrected and combined with some recent enhancements to our Less Naïve Bayesian classifier, SpamGuru achieves very close to best-in-class performance on the Full dataset for most of the ROC curve.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0" coords="3,307.44,703.17,234.02,9.96"><head></head><label></label><figDesc>Figure reffig:full-new shows the performance of the</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1" coords="5,322.20,237.64,204.22,8.17"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4. Less Naïve Bayesian vs. Naïve Bayesian.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" coords="4,55.44,73.53,472.03,577.87"><head></head><label></label><figDesc>Figure 1. Performance of SpamGuru on the TREC datasets.</figDesc><table coords="4,55.44,73.53,472.03,577.87"><row><cell></cell><cell></cell><cell></cell><cell>Full Dataset</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>SB Dataset</cell><cell></cell></row><row><cell></cell><cell>0.01</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>0.01</cell><cell></cell><cell></cell><cell></cell></row><row><cell>% Spam Misclassification (logit scale)</cell><cell>10.00 1.00 0.10</cell><cell cols="2">Aggregate of LNB+SMTP Less Naive Bayesian SMTP Path Analysis Best*</cell><cell></cell><cell>% Spam Misclassification (logit scale)</cell><cell>10.00 1.00 0.10</cell><cell cols="2">Aggregate of LNB+SMTP Less Naive Bayesian SMTP Path Analysis Best*</cell><cell></cell></row><row><cell></cell><cell>50.00</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>50.00</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>0.01</cell><cell>0.10</cell><cell>1.00</cell><cell>10.00</cell><cell>50.00</cell><cell>0.01</cell><cell>0.10</cell><cell>1.00</cell><cell>10.00</cell><cell>50.00</cell></row><row><cell></cell><cell></cell><cell cols="3">% Ham Misclassification (logit scale)</cell><cell></cell><cell></cell><cell cols="3">% Ham Misclassification (logit scale)</cell></row><row><cell></cell><cell></cell><cell></cell><cell>Mr. X Dataset</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>TM Dataset</cell><cell></cell></row><row><cell></cell><cell>0.01</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>0.01</cell><cell></cell><cell></cell><cell></cell></row><row><cell>% Spam Misclassification (logit scale)</cell><cell>10.00 1.00 0.10</cell><cell cols="2">Aggregate of LNB+SMTP Less Naive Bayesian SMTP Path Analysis Best*</cell><cell></cell><cell>% Spam Misclassification (logit scale)</cell><cell>10.00 1.00 0.10</cell><cell cols="2">Aggregate of LNB+SMTP Less Naive Bayesian SMTP Path Analysis Best*</cell><cell></cell></row><row><cell></cell><cell>50.00</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>50.00</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>0.01</cell><cell>0.10</cell><cell>1.00</cell><cell>10.00</cell><cell>50.00</cell><cell>0.01</cell><cell>0.10</cell><cell>1.00</cell><cell>10.00</cell><cell>50.00</cell></row><row><cell></cell><cell></cell><cell cols="3">% Ham Misclassification (logit scale)</cell><cell></cell><cell></cell><cell cols="3">% Ham Misclassification (logit scale)</cell></row><row><cell></cell><cell></cell><cell></cell><cell>Mr. X Dataset</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>0.01</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell>% Spam Misclassification (logit scale)</cell><cell>10.00 1.00 0.10</cell><cell cols="2">Aggregate (Corrected) Aggregate (Official) Best*</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>50.00</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>0.01</cell><cell>0.10</cell><cell>1.00</cell><cell>10.00</cell><cell>50.00</cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell></cell><cell cols="3">% Ham Misclassification (logit scale)</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row><row><cell cols="6">Figure 2. SpamGuru results with large message flaw fix.</cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div><head>Acknowledgments</head><p>The authors want to thank the many in IBM who have helped in the development of SpamGuru and the development of many of the ideas presented in this paper. Those involved include <rs type="person">Bill Arnold</rs>, <rs type="person">Nathaniel Borenstein</rs>, <rs type="person">Jason Crawford</rs>, <rs type="person">Mike Halliday</rs>, <rs type="person">Shlomo Hershkop</rs>, <rs type="person">Tien Huynh</rs>, <rs type="person">Barry Leiba</rs>, <rs type="person">Jeff Kephart</rs>, <rs type="person">Joel Ossher</rs>, <rs type="person">V. T. Rajan</rs>, <rs type="person">Isidore Rigoutsos</rs>, <rs type="person">Mark Wegman</rs>, and <rs type="person">Ian Whalley</rs>. We also give special thanks to the track organizers for all their hard work in putting together this workshop and their patience in addressing some technical difficulties that arose with our initial submission.</p></div>
			</div>			<div type="references">

				<listBibl>

<biblStruct coords="6,55.44,87.45,234.04,9.96;6,65.40,99.45,223.95,9.96;6,65.40,111.45,156.85,9.96" xml:id="b0">
	<monogr>
		<author>
			<persName coords=""><forename type="first">G</forename><surname>Cormack</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">T</forename><surname>Lynam</surname></persName>
		</author>
		<title level="m" coord="6,210.62,87.45,78.87,9.96;6,65.40,99.45,223.95,9.96;6,65.40,111.45,152.25,9.96">TREC 2005 Spam Track overview. The Fourteenth Text REtrieval Conference (TREC 2005) Notebook</title>
		<imprint>
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="6,55.44,131.37,234.09,9.96;6,65.40,143.25,224.01,9.96;6,65.40,155.25,224.04,9.96;6,65.40,167.13,146.20,9.96" xml:id="b1">
	<analytic>
		<title level="a" type="main" coord="6,173.29,131.37,116.24,9.96;6,65.40,143.25,60.14,9.96">Ensemble methods in machine learning</title>
		<author>
			<persName coords=""><forename type="first">T</forename><forename type="middle">G</forename><surname>Dietterich</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m" coord="6,136.32,143.25,153.09,9.96;6,65.40,155.25,224.04,9.96;6,65.40,167.13,20.15,9.96">MCS &apos;00: Proceedings of the First International Workshop on Multiple Classifier Systems</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2000">2000</date>
			<biblScope unit="page" from="1" to="15" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="6,55.44,187.17,234.04,9.96;6,65.40,199.05,224.06,9.96;6,65.40,211.05,196.45,9.96" xml:id="b2">
	<monogr>
		<author>
			<persName coords=""><forename type="first">B</forename><surname>Leiba</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">J</forename><surname>Ossher</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">V</forename><surname>Rajan</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">R</forename><surname>Segal</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">M</forename><surname>Wegman</surname></persName>
		</author>
		<title level="m" coord="6,115.33,199.05,174.13,9.96;6,65.40,211.05,191.55,9.96">SMTP path analysis. Proceedings of the Second Conference on Email and Anti-Spam</title>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="6,55.44,230.97,233.97,9.96;6,65.40,242.85,224.01,9.96;6,65.40,254.85,224.00,9.96;6,65.40,266.85,81.25,9.96" xml:id="b3">
	<analytic>
		<title level="a" type="main" coord="6,145.68,230.97,143.73,9.96;6,65.40,242.85,196.70,9.96">Naive (Bayes) at forty: The independence assumption in information retrieval</title>
		<author>
			<persName coords=""><forename type="first">D</forename><forename type="middle">D</forename><surname>Lewis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m" coord="6,270.36,242.85,19.05,9.96;6,65.40,254.85,224.00,9.96;6,65.40,266.85,76.73,9.96">Proceedings of ECML-98, 10th European Conference on Machine Learning</title>
		<meeting>ECML-98, 10th European Conference on Machine Learning</meeting>
		<imprint>
			<date type="published" when="1998">1998</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="6,55.44,286.77,234.00,9.96;6,65.40,298.65,37.21,9.96" xml:id="b4">
	<analytic>
		<title level="a" type="main" coord="6,130.33,286.77,128.27,9.96">Combining multiple classifiers</title>
		<author>
			<persName coords=""><forename type="first">R</forename><surname>Segal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j" coord="6,265.32,286.77,24.12,9.96;6,65.40,298.65,33.08,9.96">Virus Bulletin</title>
		<imprint>
			<date type="published" when="2005">2005</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="6,55.44,318.57,234.06,9.96;6,65.40,330.57,224.04,9.96;6,65.40,342.57,223.95,9.96;6,65.40,354.45,111.73,9.96" xml:id="b5">
	<analytic>
		<title level="a" type="main" coord="6,114.12,330.57,175.31,9.96;6,65.40,342.57,57.28,9.96">SpamGuru: An enterprise anti-spam filtering system</title>
		<author>
			<persName coords=""><forename type="first">R</forename><forename type="middle">B</forename><surname>Segal</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">J</forename><surname>Crawford</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">J</forename><forename type="middle">O</forename><surname>Kephart</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">B</forename><surname>Leiba</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m" coord="6,133.32,342.57,156.04,9.96;6,65.40,354.45,106.83,9.96">Proceedings of the First Conference on Email and Anti-Spam</title>
		<meeting>the First Conference on Email and Anti-Spam</meeting>
		<imprint>
			<date type="published" when="2004">2004</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
