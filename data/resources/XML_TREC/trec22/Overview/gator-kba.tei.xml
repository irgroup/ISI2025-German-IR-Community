<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main" coord="1,94.28,112.05,423.44,15.12">University of Florida Knowledge Base Acceleration Notebook</title>
				<funder ref="#_V9E45MA">
					<orgName type="full">National Science Foundation Graduate Research Fellowship</orgName>
				</funder>
				<funder ref="#_XTnU9xQ">
					<orgName type="full">DARPA</orgName>
				</funder>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName coords="1,128.85,144.53,92.67,10.48"><forename type="first">Shahriari</forename><surname>Morteza</surname></persName>
						</author>
						<author>
							<persName coords="1,225.42,144.53,69.33,10.48"><forename type="first">Christan</forename><surname>Nia</surname></persName>
						</author>
						<author>
							<persName coords="1,298.64,144.53,63.49,10.48"><forename type="first">Yang</forename><surname>Grant</surname></persName>
							<email>cgrant@cise.ufl.edu</email>
						</author>
						<author>
							<persName coords="1,366.03,144.53,83.95,10.48"><forename type="first">Daisy</forename><forename type="middle">Zhe</forename><surname>Peng</surname></persName>
							<email>ypeng@cise.ufl.edu</email>
						</author>
						<author>
							<persName coords="1,453.89,144.53,29.26,10.48;1,483.15,142.92,1.41,6.99"><surname>Wang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Florida</orgName>
								<address>
									<settlement>Gainesville</settlement>
									<region>Florida</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName coords="1,262.68,178.39,86.66,10.48;1,349.33,176.77,1.88,6.99"><forename type="first">Milenko</forename><surname>Petrovic</surname></persName>
							<email>mpetrovic@ihmc.us</email>
							<affiliation key="aff1">
								<orgName type="institution">Institute for Human and Machine Cognition</orgName>
								<address>
									<settlement>Ocala</settlement>
									<region>Florida</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main" coord="1,94.28,112.05,423.44,15.12">University of Florida Knowledge Base Acceleration Notebook</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">E76C353CED838D2427665953ED055411</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-08-05T15:07+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>In this paper we will present the system design and algorithm adopted by the GatorDSR team, University of Florida to efficiently process TREC KBA 2013 -SSF track. Here we will describe the system as well as the details the algorithms used to extract slot values for the given slot name. Scalability, efficiency, precision and recall are the major goals of this work, given the overly limited time limitation and available computational resources.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<facsimile>
		<surface n="1" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="2" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="3" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="4" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="5" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="6" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="7" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="8" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="9" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="10" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
	</facsimile>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>An important challenge in maintaining Wikipedia.org (WP), the most popular web-based, collaborative, multilingual knowledge base on the internet, is making sure its contents are up-to-date. Presently, there is considerable time lag between the publication date of cited news and the date of an edit to WP creating the citation. The median time lag for a sample of about 60K web pages cited by WP articles in the living people category is over a year and the distribution has a long and heavy tail <ref type="bibr" coords="1,376.53,394.08,9.96,8.74" target="#b0">[1]</ref>. Also, the majority of WP entities have updates on their associated article much less frequently than their mention frequency. Such stale entries are the norm in any large knowledge base (KB) because the number of humans maintaining the KB is far fewer than the number of entities. Reducing latency keeps KBs such as WP relevant and helpful it users.</p><p>Given an entity page, possible citations may come from a variety of sources. The actual citable information is a small percentage of the total documents that appear on the web. We develop a system to read streaming data and filter out articles that are candidates for citations. Given these documents, we extract the pairs of information in the article that is recommended for citations for each knowledge base page.</p><p>Our system contains three main components. First, we pre-process the data and build models representing the knowledge base entries. Next, we use the models to filter a stream of documents so they only contain candidate recommendations. Lastly, we processes sentences from candidate extractions and return specific information to be cited.</p><p>In this paper, we describe the system we built to process the data. We built this system as part of a formal task described in Section A. Our approach to this task is to build a modular system that allows us to explore the nuances of the training data and queries. Overall, we contribute the following:</p><p>• introduce a method to build models of name variations (Section 3.1); • built a system to filter a large amount of diverse documents (Section 3.2);</p><p>• extract entity-slot-value triples of information to be added to KB (Section 3.3);</p><p>• filter the final results using deduplication and inference (Section 3.4);</p><p>• self-evaluate our results over a 4.5 TB data set (Section 4).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">System Overview</head><p>In this section, we introduce the main components of the system. Our system is built with a pipeline architecture in mind giving it the advantage to run each section separately to allow stream processing Color details the programing language implementation of components.</p><p>without blocking the data flow of components (Figure <ref type="figure" coords="2,309.62,335.55,3.87,8.74">1</ref>). The three logical components include sections for performing preprocessing to prepare the required data, Cumulative Citation Recommendation to annotate cite-worthy documents, Streaming Slot Filling to generate the actual slot values and PostProcessing to increase precision/recall. TREC provides a streaming data set and entities from Twitter or WP to query.</p><p>Preprocessing. The contest prohibits Wikipedia entities to have any manual aliases being added and only allows automatic ways. We use Wikipedia API backlink references (redirects to a wiki entity) as aliases of the entity. We also extract aliases from within the text of a wiki entity, which will be described in Section 3.1. This whole process is referred to as Alias Extraction. The manual extraction rule is lifted and participants are allowed to manually add aliases for Twitter entities. This is allowed because the Twitter website does not provide an example page from the beginning of the document stream. This process of extracting aliases for Twitter entities is referred to as Manual Alias Extraction.</p><p>Once aliases are available we pass them through rules of generating proper name orders which will produce various forms of writing a name. As a basic example Bill Gates can be written as Gates, Bill. This will allow the system to capture various notation forms of aliases. We refer to this part as Name Order Generator.</p><p>Cumulative Citation Recommendation. The main goal of CCR is to have an aggregate list of documents that are worthy of being cited in a Wikipedia page. We perform exact string matching and treat all the documents that mention an entity equally likely to be citable. One of the reasons for this is that in former TREC KBA reports <ref type="bibr" coords="2,193.84,538.79,10.52,8.74" target="#b0">[1]</ref> there were observations of how non-mentioning documents have a low chance of being citable in Wikipedia. So we take on that and ignore non-citing documents.</p><p>Streaming Slot Filling. The purpose of SSF is to extract proper values for relations of interest, which can be found in Table <ref type="table" coords="2,174.23,574.65,3.87,8.74" target="#tab_7">6</ref>. This is called Stream Slot Filling because data is being generated as time goes on and for each extraction we should only consider current or past data. In Figure <ref type="figure" coords="2,449.54,586.61,4.98,8.74">1</ref> we refer to this as Streaming Slot Value Extraction. Stream slot filling is done by pattern matching documents with manually produced patterns for slots of interest. The way we do this is by observing a sentence that has a mention of the entity or one of its coreferences. An anchor word in the sentence related to the slot name is located and we match either left or right of the anchor word for potential slot values.</p><p>Post Processing Algorithm. The SSF output of many extractions is noisy. The data contains duplicates and incorrect extractions. We can define rules to sanitize the output only using the information present in the SSF file. The file is processed in time order, in a tuple-at-a-time fashion to minimize the impact on accuracy. We define two classes of rules deduplication rules and inference rules. In our diagram we refer to this component as High Accuracy Filter.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Implementation</head><p>We extract aliases for entities from Wikipedia automatically both using API and using the actual page content, then apply pattern matching rules for slot value extraction. Our contribution is that we perform pattern matching that conforms to each slot value along with post-processings to eliminate noisy outputs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Alias Generation</head><p>We use Wikipedia API to get some aliases automatically. This is done by retrieving backlink references (redirects of a wiki entity). Unfortunately this is not good enough and to enhance recall we need more aliases. To have better use of a wiki page we parse HTML DOM of the page, then use regular expressions to extract the bold phrases of the first paragraph as alias of the actual entity. Based on our observation this is a very accurate heuristic and provides us with lots of famous aliases of the entities. To consider other typical cases we consider some generic first name last name order swapping conventions such as Bill Gates → Gates, Bill. Meanwhile, William Henry Gates is an alias for Bill Gates in WP as a backlink reference. These kinds of aliases are also included in matching entities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Cumulative Citation Recommendation</head><p>Our pipeline of processing the corpus consists of a two layer indexing system referred to as Chunk Files Index Generator and StreamItems Index Generator. Chunk Files Index Generator will generate indexes of the chunk files that contain a mention of any of the desired entities. StreamItems Index Generator on the other hand will index StreamItems that contain a mention of a given entity respectively. This two level indexing will eliminate the need to process each and every ChunkFile/StreamItem for every entity. The reason for splitting this task into two steps is that not all chunk files contain any mention of the entities and we want to get rid of them as soon as possible. Chunk Files Index Generator which is written in C++ discards non-mentioning chunk files and will stop further processing a chunk file as soon as it finds a mention there. Each chunk file can contain up to thousands of SIs which can be so time consuming if we were to process them in our Java base code. Processing StreamItems on the other hand is done in Java with ideas in mind for later on extensibility by adding other Java libraries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Streaming Slot Value Extraction</head><p>In the data set, we are given 4 months of data (October 2011 -February 2012) as training data. Instead of building a classifier we use pattern matching methods to find corresponding slot values for entities. Pattern matching is simple to manipulate results and implement. Additionally, a classifier approach is more difficult to evaluate and explain results.</p><p>With the Streamitem indexes generated by the CCR, we first fetch the sentences containing entites by using alias names and coreference information provided by Lingpipe tags. Then use these senteces to match patterns and when patterns matched, generate SSF results. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.1">Format of patterns</head><p>A pattern is defined as a record representing knowledge going to be added to a knowledge base. A pattern P is represented as a five-tuple P = p 1 , p 2 , p 3 , p 4 , p 5 .</p><p>The first value, p 1 represents the type of entity. These entity types are in the set {FAC, ORG, PER} where FAC represents a type of facility, ORG represents an organization and PER represents a person. FAC, ORG and PER are Lingpipe entity types. The p 2 represents a slot name. A list of slot names is present in Table <ref type="table" coords="4,510.78,382.45,3.87,8.74" target="#tab_7">6</ref>. The third element p 3 is the pattern content. This is a string found in the sentence. The extractor looks for this exact string or pattern in a sentence. The pattern evaluator uses a direction (left or right) found in p 4 to explore sentence. The final element p 5 represent the slot value of a pattern. Thois The type of slot value may be the entity type tagged by Lingpipe, a noun phrase (NP) tagged by OpenNLP or a hard-coded phrase. For these three kinds of patterns, we implement them in different ways accordingly. Next, we explain the patterns with more details, an example can be found in Figure <ref type="figure" coords="4,349.07,454.18,3.87,8.74" target="#fig_1">2</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.2">Types of patterns</head><p>There are three types of patterns distinguished by different types of slot values in the patterns. The matching methods using these three types of patterns are implememented according to the different information and structures of slot values.</p><p>Type I. This pattern type is driven by the slot value type, a pattern tagged by Lingpipe. For example, pattern PER, FounderOf, founder, right, ORG . PER means that the entity we are finding slot values for a PER entity; FounderOf means this is a pattern for FounderOf slot. founder is the anchor word we are match in a sentence; right means that we are going to the right part of the sentence to match the pattern and find the slot value; ORG means the slot value should be a ORG entity.</p><p>Type II. This pattern type is unique because it only looks for a slot value tagged as noun phrase (NP) by OpenNLP. For example, pattern PER, AwardsWon, awarded, right, NP . This pattern can be interpreted as that we are looking for a noun phrase after the awarded since that noun phrase may represent an award. Titles and awards are usually not the Lingpipe entities, hence the use of the OpenNLP noun phrase chunker to fetch the noun phrases.</p><p>Type III. Some relations are best discovered by hard coding the slot values. Examples of these include time phrases: PER, DateOfDeath, died, right, last night . In this pattern, last night means we are looking for exactly the phrase last night to the right of died. This pattern is inspired by the intuition that in news articles, people often mention that somebody died last night instead of mentioning the accurate date information and Lingpipe tends not to tag phrases like last night as a DATE entity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.3">A short discussion</head><p>We sampled documents from the training data period to generate an initial set of patterns. We then use these patterns to generate SSF results. By manully looking at these results, we prune some patterns with poorperformance and add more patterns that we identified from these results. We use several iterations to find the best patterns. We found that it is time consuming to identity quality pattern.</p><p>We found three major classes of accuracy errors: incorrect entities selected, incorrect tags by Lingpipe and incorrect pattern extractions. The first issue is ameliorated by generating better aliases (Section 3.1). And we use post-processing to reduce the second and third types of errors (Section 3.4). We didn't use more advanced NLP packages such as Stanford NLP because of the large size of the data set. The post-processing step to improve the results is discussed in the next section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">High Accuracy Filter</head><p>The SSF output of streaming slot value extraction is noisy. The data contains duplicates and incorrect extractions. We can define rules to sanitize the output only using the information present in the SSF file. The file is processed in time order, in a tuple-at-a-time fashion to minimize the impact on accuracy. We define two classes of rules: deduplication and inference rules.</p><p>The output contains many duplicate entries. As we read the list of extracted slots we create rules to define "duplicate". Duplicates can be present in a window of rows; we use a window size of 2 meaning we only be adjacent rows. Two rows are duplicates if they have the same exact extraction, or if the rows have the same slot name and a similar slot value or if the extracted sentence for a particular slot types come from the same sentence.</p><p>New slots can be deduced from existing slots by defining inference rules. For example, two slots for the task are "FounderOf" and "FoundedBy". A safe assumption is these slot names are biconditional logical connectives with the entities and slot values. Therefore, we can express a rule "X FounderOf Y" equals "Y FoundedBy X" where X and Y are single unique entities. Additionally, we found that the slot names "Contact Meet PlaceTime" could be inferred as "Contact Meet Entity" if the Entity was a FAC and the extracted sentence contained an additional ORG/FAC tag. We also remove erronious slots that have extractions that are several pages in length or tool small. Errors of extracting long sentences can typically be attributed to poor sentence parsing of web documents. We have some valid "small" extractions. For example a comma may separate a name and a title (e.g. "John, Professor at MIT"). But such extraction rules can be particularly noisy, so we check to see if the extracted values have good entity values.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Results</head><p>Our system was developed on a 32-core server described in Table <ref type="table" coords="5,365.16,505.43,3.87,8.74">2</ref>. The corpus is a snapshot of the web in English. Each document is annotated using lingpipe and is called StreamItem, a bundle of StreamItems are put together and serialized as Apache Thrift objects, then compressed using xz compression with Lem-pelZivMarkov chain algorithm (LZMA2) and finally encrypted using GNU Privacy Guard (GPG) with RSA asymmetric keys. The total size of the data after XZ compression and GPG encryption is 4.5TB and just over 500M StreamItems <ref type="bibr" coords="5,181.74,565.20,9.96,8.74" target="#b1">[2]</ref>. Data is stored in directories the naming of which is date-hour combination: from 2011-10-05-00 (5th of October 2011, 12am) until 2013-02-13-23 (13th of Feburary 2013, 11pm), which consists of 11952 date-hour combinations. This corpora consists of various media types the distribution of which can be found in Table <ref type="table" coords="5,202.88,601.07,3.87,8.74" target="#tab_2">1</ref>. To have a sense of the scale of objects and compression as an example a 6mb gpg.xz files would become 45 mb thrift objects which can contain a couple of thousand StreamItems depending on their size. Some of the documents have null values for their annotation fields. The first portion of the data which ranges from October 2011 to February 2012 is considered as training data. The source code of our system is stored as an open source project where enthusiasts can also contribute to <ref type="bibr" coords="5,489.62,648.89,9.96,8.74" target="#b2">[3]</ref>, also the relevant discussion mailing list is accessible here <ref type="bibr" coords="5,284.98,660.84,9.96,8.74" target="#b3">[4]</ref>.</p><p>We have 135 extraction patterns coverin each slot-name/entity-type combinations. Our final submission was named submission infer. Our results are as follows: Document extraction using query entity matching with aliases, sentence extraction using alias matching and co-reference. Slot extraction using patterns, NER On the performance of our initial submission run we performed random sampling via two processes, the results of which are according to Table <ref type="table" coords="6,245.32,391.80,3.87,8.74" target="#tab_3">3</ref>. You can view that we have had an accuracy of around 55%, and about 15% wrong entity identified and 30% incorrect value extracted across all entities and slot types. Most of our issues for this submission were regarding poor slot value extraction patterns and incomplete aliases whih were tried to be mtigated later on. For our final submission, we provide a more detailed statistics, which has been elaborated in Table <ref type="table" coords="6,199.94,439.62,4.98,8.74" target="#tab_5">5</ref> and Table <ref type="table" coords="6,254.19,439.62,3.87,8.74" target="#tab_4">4</ref>. Table <ref type="table" coords="6,293.39,439.62,4.98,8.74" target="#tab_5">5</ref> shows the extent of search outreach for each slot name. You can see that Affiliate has been the slot name with highest hits and CauseOfDeath our lowest hit with 0 instances found matching our patterns, after that AwardsWon has been the next with 38 instances found. Affiliate is a very generic term and extracting real affiliates can be quite challenging using the extraction patterns provided. This can lead to noisy results. On the other hand for more precise terms our accuracy increases but we have less recall. Table <ref type="table" coords="6,245.40,499.40,4.98,8.74" target="#tab_4">4</ref> addresses the relative accuracy measure per slot value. There you can view that we have had the highest accuracy of 63.6% for AssociateOf and the lowest of 1% -5% for Affiliate, Contact Meet PlaceTime and EmployeeOf.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Discussion &amp; Future Works</head><p>Table <ref type="table" coords="6,98.72,578.08,4.98,8.74" target="#tab_5">5</ref> show a varied distribution of extracted slot names. Some slots naturally have more results than other slots. For example, AssociateOf and Affiliate have more slot values than DateOfDeath and CauseOfDeath, since there are only so few entities that are deceased. Also, some patterns are more general causing more extractions. For example, for Affiliate, we use and, with as anchor words. These words are more common than dead or died or founded in other patterns. When we evaluate the results of slot extraction, we find three kinds of problems for accuracy: 1) wrong entities found; 2) wrong tags by the Lingpipe; 3) wrong results matched by the patterns. We also have recall problems: 1) not enough good alias names to find all the entities. 2) not enough and powerful patterns to capture all the slot values.</p><p>We will use entity resolution methods and other advanced methods to improve the accuracy and recall of entity extraction part.</p><p>For slot extraction, to improve the performance, we need: 1) Using multi-class classifiers instead of pattern matching method to extract slot values in order to increase both recall and accuracy for slots "Affiliate", "AssociateOf", "FounderOf", "EmployeeOf", "FoundedBy", "TopMembers", "Contact Meet Entity" and so on. 2) For special slots, like "Titles", "DateOfDeath", "CauseOfDeath", "AwardsWon", using different kind of advanced methods, e.g. classifiers, matching methods. 3) Using other NLP tools or using classifiers to overcome the drawbacks of the LingPipes inaccurate tags. The first and second tasks are the most important tasks we need to do. About 50% of twitter entities are not found by the system. One reason is those entities are not popular. For example, a 'Brenda Weiler' Google search result has 860,000 documents over the whole web. For our small portion of the web it might make sense. The histogram of the entities shows that more than half of the entities have appeared in less than 10 StreamItems. A good portion have appeared only once.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusions</head><p>We experimented through different tools and approaches to best process the massive amounts of data on the platform that we had available to us. We generate aliases for wikipedia entities using Wiki API and extract some aliases from wikipedia pages text itself. On twitter entities we extract aliases manually as it is part of the rule of the KBA track. We process documents that mention entities for slot value extraction. Slot values are determined using pattern matching over coreferences of entities in sentences. Finally post processing will filter, cleanup and infers some new slot values to enhance recall and accuracy.</p><p>We noticed that some tools that claim to be performant for using the hardware capabilities at hand sometimes don't really work as claimed and you should not always rely on one without a thorough A/B testing of performance which we ended up in generating our in-house system for processing the corpus and generating the index. Furthermore, on extracting slot values, pattern matching might not be the best options but definitely can produce some good results at hand. We have plans on generating classifiers for slot value extraction purposes. Entity resolution on the other hand was a topic we spent sometime on but could not get to stable grounds for it. Entity resolution will distinguish between entities of the same name but different contexts. Further improvements on this component of the system are required.</p><p>[6] Tac kbp slots. http://www.nist.gov/tac/2012/KBP/task guidelines/TAC KBP Slots V2.4.pdf.</p><p>[7] Ace (automatic content extraction) english annotation guidelines for events. http://projects.ldc.upenn.edu/ace/docs/English-Events-Guidelines v5.4.3.pdf.</p><p>[8] Heng Ji and Ralph Grishman. Knowledge base population: Successful approaches and challenges. In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies -Volume 1, HLT '11, pages 1148-1158, Stroudsburg, PA, USA, 2011. Association for Computational Linguistics.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A KBA Task Background</head><p>The National Institute of Standards (NIST) hosted the Text REtrieval Conference (TREC) -Knowledge Base Acceleration challenge in 2013. The task contains two main sections designed for this track, Cumulative Citation Recommendation and Streaming Slot Filling. Due to the importance of knowledge bases, both of these tracks aim to accelerating populating them, hence the title Knowledge Base Acceleration (KBA). Below we describe each of these tracks and their purposes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.1 Cumulative Citation Recommendation (CCR)</head><p>For this track, assessors were instructed to "use the Wikipedia article to identify (disambiguate) the entity, and then imagine forgetting all info in the WP article and asking whether the text provides any information about the entity" <ref type="bibr" coords="9,149.99,334.55,9.96,8.74" target="#b0">[1]</ref>. Documents are divided according if an entity is mentioned and a relevance level to the entity.</p><p>More specifically, a document may have a mention or be without a mention.</p><p>• Mention: Document explicitly mentions target entity, such as full name, partial name, nickname, pseudonym, title, stage name. • Zero-mention: Document does not directly mention target. Could still be relevant, e.g. metonymic references like "this administration" → "Obama". See also synecdoche. A document could also be relevant to target entity through relation to entities mentioned in document -apply this test question: can I learn something from this document about target entity using whatever other information I have about entity?</p><p>The relevance of a document to a query is split into the four classifications.</p><p>• Garbage: not relevant, e.g. spam.</p><p>• Neutral: Not relevant, i.e. no info could be deduced about entity, e.g., entity name used in product name, or only pertains to community of target such that no information could be learned about entity, although you can see how an automatic algorithm might have thought it was relevant. • Relevant: Relates indirectly, e.g., tangential with substantive implications, or topics or events of likely impact on entity. • Central: Relates directly to target such that you would cite it in the WP article for this entity, e.g. entity is a central figure in topics/events.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2 Streaming Slot Filling (SSF)</head><p>The task is that given certain WP or Twitter entities (wiki/twitter URLs) and certain relations of interest (given in Table <ref type="table" coords="9,143.12,629.51,3.87,8.74" target="#tab_7">6</ref>), extract as many triple relations as possible ( hence, slot filling). This can be used to automatically populate knowledgebases such as free-base or DBPedia or even fill-in the information boxes at Wikipedia. Below, you can view some examples of what it means to fill in a slot value; in each example there is a sentence of interest that we wish to extract slot values from, an entity that the slot value is related to, and a slot name which can be thought of as the topic of the slot value:  <ref type="table" coords="10,181.05,266.44,4.98,8.74" target="#tab_7">6</ref> you can view some slot values and their types, the comprehensive description of which can be found at [6] and <ref type="bibr" coords="10,209.99,278.40,9.96,8.74">[7]</ref>. The details of the metric for SSF will favor systems that most closely match the changes in the ground truth time line of slot values. This is done by searching for other documents that mentioned an entity and exactly matched the slot fill strings selected by the assessors.</p><p>For similar approaches regarding last year's track you can refer to [8]. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0" coords="3,197.51,107.63,34.43,8.95;3,196.71,119.51,36.04,8.95;3,264.38,127.66,57.98,8.95;3,262.97,139.54,61.00,8.95;3,257.33,151.22,72.28,8.95;3,269.01,107.33,47.92,8.95;3,129.34,129.68,35.03,8.95;3,132.77,141.35,28.39,8.95;3,119.68,153.43,54.36,8.95;3,130.95,107.33,31.00,8.95;3,181.87,161.25,20.74,7.34;3,98.24,75.12,414.31,8.05"><head></head><label></label><figDesc>Boris Berezovsky, won the Gold Medal at the International Tchaikovsky Competition in Moscow.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1" coords="3,145.74,183.93,316.09,8.74"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Pattern Matching with Slot Value on the Right Side of Entity.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" coords="4,72.00,74.87,273.05,215.83"><head></head><label></label><figDesc>Algorithm 1 Streaming Slot Value Extraction Pseudocode List of entities E = {e 0 , . . . , e 170 } List of patterns P = {p 0 , . . . , p |P | } List of streamitems containing entities S = {s 0 , . . . , s |S| }</figDesc><table coords="4,81.96,138.48,207.55,152.23"><row><cell>for si ∈ S do</cell></row><row><cell>for sentence ∈ si do</cell></row><row><cell>for entity ∈ E do</cell></row><row><cell>if Contains(sentence, entity) then</cell></row><row><cell>for pattern ∈ P suitable for entity do</cell></row><row><cell>if Satisfies(sentence, pattern) then</cell></row><row><cell>Emit(sentence, pattern)</cell></row><row><cell>end if</cell></row><row><cell>end for</cell></row><row><cell>end if</cell></row><row><cell>end for</cell></row><row><cell>end for</cell></row><row><cell>end for</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" coords="6,72.00,82.08,468.00,294.55"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table coords="6,255.56,82.08,137.13,8.74"><row><cell>Document Chunks Distribution</cell></row></table><note coords="6,72.00,355.94,468.00,8.74;6,72.00,367.89,189.07,8.74"><p>tags and NP tags. 158,052 documents with query entities, 17885 unique extracted slot values for 8 slots and 139 entities, 4 slots and 31 entities missing.</p></note></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" coords="6,145.85,664.64,320.31,43.21"><head>Table 3 :</head><label>3</label><figDesc>SSF Performance Measure on initial submission Correct Incorrect Entity name Incorrect Value</figDesc><table coords="6,145.85,686.76,290.61,21.09"><row><cell>Sampling #1</cell><cell>55%</cell><cell>17%</cell><cell>27%</cell></row><row><cell>Sampling #2</cell><cell>54%</cell><cell>15%</cell><cell>31%</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" coords="7,72.00,142.57,467.99,181.19"><head>Table 4 :</head><label>4</label><figDesc>SSF Accuracy Measure on submission infer : Accuracy of AffiliateOf was the best and Affiliate applied poorly due to ambiguity of being an affiliate of somebody/something</figDesc><table coords="7,119.50,166.75,373.00,157.01"><row><cell>Slot Name</cell><cell cols="3">Correct Incorrect Entity name Incorrect Value</cell></row><row><cell>Affiliate</cell><cell>1%</cell><cell>95%</cell><cell>5%</cell></row><row><cell>AssociateOf</cell><cell>63.6%</cell><cell>9.1%</cell><cell>27.3%</cell></row><row><cell>AwardsWon</cell><cell>10%</cell><cell>10%</cell><cell>80%</cell></row><row><cell>CauseOfDeath</cell><cell>0%</cell><cell>0%</cell><cell>0%</cell></row><row><cell>Contact Meet Entity</cell><cell>21%</cell><cell>42%</cell><cell>37%</cell></row><row><cell>Contact Meet PlaceTime</cell><cell>5%</cell><cell>20%</cell><cell>85%</cell></row><row><cell>DateOfDeath</cell><cell>29.6%</cell><cell>71%</cell><cell>25%</cell></row><row><cell>EmployeeOf</cell><cell>5%</cell><cell>30%</cell><cell>65%</cell></row><row><cell>FoundedBy</cell><cell>62%</cell><cell>17%</cell><cell>21%</cell></row><row><cell>FounderOf</cell><cell>50%</cell><cell>0%</cell><cell>50%</cell></row><row><cell>Titles</cell><cell>55%</cell><cell>0%</cell><cell>45%</cell></row><row><cell>TopMembers</cell><cell>33%</cell><cell>17%</cell><cell>50%</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" coords="7,72.00,464.86,468.00,192.59"><head>Table 5 :</head><label>5</label><figDesc>Recall Measure on submission infer : Generic slot names like affiliate had the most recall, compared to less popular slot names e.g. DateOfDeath</figDesc><table coords="7,132.89,488.48,346.22,168.97"><row><cell>Slot Name</cell><cell>Total instances of</cell><cell># of entities covered</cell></row><row><cell></cell><cell>slot value found</cell><cell>by slot value</cell></row><row><cell>Affiliate</cell><cell>108598</cell><cell>80</cell></row><row><cell>AssociateOf</cell><cell>25278</cell><cell>106</cell></row><row><cell>AwardsWon</cell><cell>38</cell><cell>14</cell></row><row><cell>CauseOfDeath</cell><cell>0</cell><cell>0</cell></row><row><cell>Contact Meet Entity</cell><cell>191</cell><cell>8</cell></row><row><cell cols="2">Contact Meet PlaceTime 5974</cell><cell>109</cell></row><row><cell>DateOfDeath</cell><cell>87</cell><cell>14</cell></row><row><cell>EmployeeOf</cell><cell>75</cell><cell>16</cell></row><row><cell>FoundedBy</cell><cell>326</cell><cell>30</cell></row><row><cell>FounderOf</cell><cell>302</cell><cell>29</cell></row><row><cell>Titles</cell><cell>26823</cell><cell>118</cell></row><row><cell>TopMembers</cell><cell>314</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" coords="9,72.00,689.26,468.00,32.68"><head></head><label></label><figDesc>Example 1: "Matthew DeLorenzo and Josiah Vega, both 14 years old and students at Elysian Charter School, were honored Friday morning by C-SPAN and received $1,500 as well as an iPod Touch after winning a nationwide video contest." Entity: http://en.wikipedia.org/wiki/Elysian Charter School Slot name: Affiliate Possible slot values: "Matthew DeLorenzo", "Josiah Vega" Incorrect slot values: "C-SPAN", "iPod Touch" Example 2: "Veteran songwriters and performers Ben Mason, Jeff Severson and Jeff Smith will perform on Saturday, April 14 at 7:30 pm at Creative Cauldron at ArtSpace, 410 S. Maple Avenue." Entity: http://en.wikipedia.org/wiki/Jeff Severson Slot name: Affiliate Possible slot values: "Ben Mason", "Jeff Severson", "Jeff Smith" Incorrect slot values: "Creative Caldron", "Art Space" Example 3: "Lt. Gov. Drew Wrigley and Robert Wefald, a retired North Dakota district judge and former state attorney general, unveiled the crest Friday during a ceremony at the North Dakota Capitol." Entity: http://en.wikipedia.org/wiki/Hjemkomst Center Slot name: Contact Meet PlaceTime Slot value: "Friday during a ceremony at the North Dakota Capitol" In streaming slot filling, we are only interested in new slot values that were not substantiated earlier in the stream corpus. In Table</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" coords="10,159.36,345.59,293.27,128.43"><head>Table 6 :</head><label>6</label><figDesc>Ontology of Slot Name Categories</figDesc><table coords="10,159.36,357.26,293.27,116.76"><row><cell>PER</cell><cell>FAC</cell><cell>ORG</cell></row><row><cell>Affiliate</cell><cell></cell><cell></cell></row><row><cell>AssociateOf</cell><cell></cell><cell></cell></row><row><cell>Contact Meet PlaceTime</cell><cell></cell><cell></cell></row><row><cell>AwardsWon</cell><cell>Affiliate</cell><cell>Affiliate</cell></row><row><cell>DateOfDeath</cell><cell>Contact Meet Entity</cell><cell>TopMembers</cell></row><row><cell>CauseOfDeath</cell><cell></cell><cell>FoundedBy</cell></row><row><cell>Titles</cell><cell></cell><cell></cell></row><row><cell>FounderOf</cell><cell></cell><cell></cell></row><row><cell>EmployeeOf</cell><cell></cell><cell></cell></row></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div><head>Acknowledgements</head><p>Christan Grant is funded by a <rs type="funder">National Science Foundation Graduate Research Fellowship</rs> under Grant No. <rs type="grantNumber">DGE-0802270</rs>. This work has also been supported in part by <rs type="funder">DARPA</rs> under <rs type="grantNumber">FA8750-12-2-0348-2 (DEFT/CUBISM</rs>).</p></div>
			</div>
			<listOrg type="funding">
				<org type="funding" xml:id="_V9E45MA">
					<idno type="grant-number">DGE-0802270</idno>
				</org>
				<org type="funding" xml:id="_XTnU9xQ">
					<idno type="grant-number">FA8750-12-2-0348-2 (DEFT/CUBISM</idno>
				</org>
			</listOrg>
			<div type="references">

				<listBibl>

<biblStruct coords="8,87.50,609.95,452.50,8.74;8,87.50,621.91,452.50,8.74;8,87.50,633.86,343.51,8.74" xml:id="b0">
	<analytic>
		<title level="a" type="main" coord="8,130.68,621.91,301.92,8.74">Building an entity-centric stream filtering test collection for trec 2012</title>
		<author>
			<persName coords=""><forename type="first">Max</forename><surname>John R Frank</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Daniel</forename><forename type="middle">A</forename><surname>Kleiman-Weiner</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Feng</forename><surname>Roberts</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Ce</forename><surname>Niu</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Christopher</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Ian</forename><surname>Ré</surname></persName>
		</author>
		<author>
			<persName coords=""><surname>Soboroff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m" coord="8,454.01,621.91,85.99,8.74;8,87.50,633.86,98.75,8.74">21th Text REtrieval Conference (TREC&apos;12)</title>
		<imprint>
			<date type="published" when="2013">2013</date>
		</imprint>
		<respStmt>
			<orgName>National Institute of Standards and Technology</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct coords="8,87.50,653.69,407.55,8.74" xml:id="b1">
	<monogr>
		<ptr target="http://aws-publicdatasets.s3.amazonaws.com/trec/kba/index.html" />
		<title level="m" coord="8,87.50,653.69,105.56,8.74">Trec kba stream corpora</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct coords="8,87.50,673.53,290.47,8.74" xml:id="b2">
	<monogr>
		<ptr target="https://github.com/cegme/gatordsr" />
		<title level="m" coord="8,87.50,673.53,122.85,8.74">Gatordsr opensource project</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct coords="8,87.50,693.36,329.30,8.74" xml:id="b3">
	<monogr>
		<ptr target="https://groups.google.com/forum/#!forum/gatordsr" />
		<title level="m" coord="8,87.50,693.36,90.56,8.74">Gatordsr mailing list</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct coords="8,87.50,713.20,222.16,8.74" xml:id="b4">
	<monogr>
		<title level="m" type="main" coord="8,87.50,713.20,57.40,8.74">Apache spark</title>
		<ptr target="http://spark.incubator.apache.org/" />
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
