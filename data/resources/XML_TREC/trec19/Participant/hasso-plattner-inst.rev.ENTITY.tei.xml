<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main" coord="1,145.15,63.60,321.69,20.73;1,113.42,91.50,385.15,20.73">ECIR -a Lightweight Approach for Entity-centric Information Retrieval</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName coords="1,62.45,134.17,75.32,10.37"><forename type="first">Alexander</forename><surname>Hold</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">SAP Research Center Dresden</orgName>
								<address>
									<addrLine>SAP AG Chemnitzer Str. 48</addrLine>
									<postCode>01187</postCode>
									<settlement>Dresden</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName coords="1,147.33,134.17,70.75,10.37"><forename type="first">Michael</forename><surname>Leben</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">SAP Research Center Dresden</orgName>
								<address>
									<addrLine>SAP AG Chemnitzer Str. 48</addrLine>
									<postCode>01187</postCode>
									<settlement>Dresden</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName coords="1,227.74,134.17,75.38,10.37"><forename type="first">Benjamin</forename><surname>Emde</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">SAP Research Center Dresden</orgName>
								<address>
									<addrLine>SAP AG Chemnitzer Str. 48</addrLine>
									<postCode>01187</postCode>
									<settlement>Dresden</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName coords="1,105.81,148.69,80.09,10.37"><forename type="first">Christoph</forename><surname>Thiele</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">SAP Research Center Dresden</orgName>
								<address>
									<addrLine>SAP AG Chemnitzer Str. 48</addrLine>
									<postCode>01187</postCode>
									<settlement>Dresden</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName coords="1,194.87,148.69,75.25,10.37"><forename type="first">Felix</forename><surname>Naumann</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">SAP Research Center Dresden</orgName>
								<address>
									<addrLine>SAP AG Chemnitzer Str. 48</addrLine>
									<postCode>01187</postCode>
									<settlement>Dresden</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName coords="1,223.18,177.74,38.65,10.37"><surname>Potsdam</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">SAP Research Center Dresden</orgName>
								<address>
									<addrLine>SAP AG Chemnitzer Str. 48</addrLine>
									<postCode>01187</postCode>
									<settlement>Dresden</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName coords="1,271.54,177.74,44.31,10.37;1,355.54,134.17,44.86,10.37"><forename type="first">Wojciech</forename><surname>Germany</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">SAP Research Center Dresden</orgName>
								<address>
									<addrLine>SAP AG Chemnitzer Str. 48</addrLine>
									<postCode>01187</postCode>
									<settlement>Dresden</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName coords="1,404.58,134.17,82.04,10.37"><forename type="first">Falk</forename><surname>Barczynski</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">SAP Research Center Dresden</orgName>
								<address>
									<addrLine>SAP AG Chemnitzer Str. 48</addrLine>
									<postCode>01187</postCode>
									<settlement>Dresden</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName coords="1,490.81,134.17,32.53,10.37"><surname>Brauer</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">SAP Research Center Dresden</orgName>
								<address>
									<addrLine>SAP AG Chemnitzer Str. 48</addrLine>
									<postCode>01187</postCode>
									<settlement>Dresden</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main" coord="1,145.15,63.60,321.69,20.73;1,113.42,91.50,385.15,20.73">ECIR -a Lightweight Approach for Entity-centric Information Retrieval</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">90EF00F0C3734A8739965DA65BACA4A0</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-08-05T15:05+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>This paper describes our system developed for the TREC 2010 Entity track. In particular we study the exploitation of advanced features of different Web search engines to achieve high quality answers for the 'related entity finding'-task.</p><p>Our system preprocesses a user query using part-ofspeech tagging and synonym dictionaries, and generates an enriched keyword query employing advanced features of particular Web search engines. After retrieving a corpus of documents, the system constructs rules to extract candidate entities. Potentially related entities are deduplicated and scored for each document with respect to the distance to the source entity that is defined in the query. Finally, these scores are aggregated across the corpus by incorporating the rank position of a document. For homepage retrieval we further employ advanced features of Web search engines, for instance to retrieve candidate URLs by queries such as 'entity in anchor'. Homepages are ranked by a weighted aggregation of feature vectors. The weight for each individual feature was determined in beforehand using a genetic learning algorithm.</p><p>We employed a commercial information extraction system as a basis and implemented our system for three different search engines. We discuss our experiments for the different web search engines and elaborate on the lessons learned.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<facsimile>
		<surface n="1" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="2" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="3" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="4" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="5" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="6" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="7" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="8" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="9" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
	</facsimile>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>An Entity-Centric Information Retrieval system (ECIR) promises a huge potential for web-and businessusers. We study in particular the application and value of entity-centric search algorithms for enterprise applications. Thus we motivate our approach by an entitycentric business task: Consider a business analyst of a large corporation producing industrial goods who needs to determine potential customers (leads). This is usually an extremely time consuming task. Having an ECIR-system he might for instance simply query for all competing companies and retrieve the corresponding customers for each of them. There are many other usage scenarios of an ECIR-system in an enterprise search setting.</p><p>However, a company is usually not able to index the entire Web. Thus, we focus on how to incorporate available services on the Web, especially search engines, and combine them with limited local hardware resources to provide a system that is able to provide high quality answers for the Entity Tracks' "find related entities"-(REF) task.</p><p>A task of the entity track as part of the TREC 2010 challenge is to provide a system that finds all entities with their homepages that are in a relation -described in natural language -with an input entity. In our work, we denote these entities as target entities and use the term source entity for referencing the input entity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Input</head><p>The input of our system is a list of queries (topics) in an XML format. Listing 1 shows an example query that is used across the paper. The element num describes the identifier of the query. The element entity_name contains the name of the source entity and entity_URL a clueweb ID -a reference to the homepage of this entity. The definition of target_entity determines the type of the target entity. The last element is the narrative, which qualifies the relation between the source and target entity in natural language.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Output</head><p>The designated output as shown in Listing 2 contains one line for each found target entity with the following attributes:</p><p>• topic number,</p><p>• the constant string 'Q0',</p><p>• the clueweb document id for the homepage,</p><p>• the rank position of the particular target entity,</p><p>• the computed score for the target entity,</p><p>• the unique run ID and • the normalized entity name (optional). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. ECIR ARCHITECTURE</head><p>The process of retrieving and ranking source entities is illustrated in Figure <ref type="figure" coords="2,163.73,328.63,4.11,9.50" target="#fig_2">1</ref>. Our system starts with a query expansion and rewriting step, which analyzes an input topic to create a keyword query for the configured Web search engine and to preprocess the query for the extraction task. The document retrieval component queries for each topic a specified search engine and stores the resulting web pages to the file system. The acquired document corpus and the preprocessed topic are the input for subsequent processing steps.  After the document retrieval has finished, the analysis process is started. It reads the files each containing the text of a single web page. For each of the documents a data container object is created, which is passed through the process steps.</p><p>In the entity extraction phase each document is scanned for possible target entities. These are stored in the document's data container object. In the next step the entities are subjected to deduplication and are scored respectively (Section III-C). For the ranked entities, which need to have a required minimum score, the homepages are determined (Section III-D). At a last step, we map the retrieved URLs to document ids of the clueweb document corpus.</p><p>We use Apache's implementation of the Unstructured Information Management Architecture-standard (UIMA, http://uima.apache.org/) to manage the analysis process, which is implemented as a UIMA collection processing engine (CPE). The advantage of using UIMA is that components can be exchanged and developed independently.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. SYSTEM COMPONENTS IN DETAIL</head><p>In the following we introduce each component that is illustrated in Figure <ref type="figure" coords="2,407.87,273.63,5.48,9.50" target="#fig_2">1</ref> and discuss the most important concepts in detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Query Expansion and Document Retrieval</head><p>The task of the query expansion and document retrieval component is to provide text documents that may contain information about the relation between source entity and target entity. This relation is described by the narrative. The main challenge here is to estimate the number of documents to retrieve enough input for a good recall, but not too many to achieve acceptable processing times. Further, if we retrieve too many documents, the corpus may contain many less relevant documents and thus harm precision.</p><p>Due to obvious limitations in local hardware resources, we did not build our own search engine. Instead, we use commercial Web information retrieval engines, namely Yahoo, Google, and Bing. In order to retrieve the most likely relevant documents, we need to generate a suitable keyword query for a search engine based on the topic description and capabilities of a search engine.</p><p>In the first step of the query expansion and rewriting we extract part-of-speech elements from the narrative. We are interested in finding verbs and noun groups. Verbs are important, because they qualify the relation between source entity and target entity. Noun groups often qualify the target entity in more detail and can be interpreted as a kind of a selection criterion. For the example topic in Listing 1, we extract the following: homepages, manufacturers, LCD televisions, and sold.</p><p>The next step is to find alternative names for the source entity. Thus, we expand our query to allow for variations that are popular on the Web. For this purpose we exploit the Freebase (http://www.freebase. com/) search service. As a query we send simply the source entity name and retrieve alternative names. For each alternative name we form an intermediate keyword query, built from an alternative name and the source entity name to determine the number of hits returned by a commercial search engine. We sort all alternative names by this number in descending order and choose the most popular four. For example, for Costco we obtain Costco travel, Costco Wholesale, Price Costco, and Costco Wholesale Corp.</p><p>We concatenate the nouns and verbs extracted from the narrative and the source entity together with its alternatives to a single query. Further, we make sure that the web search engine also allows for synonyms of the tokens derived from the narrative. For instance in the case of Google, we add a tilde as a token prefix. Thus, in case of our example and Google as Web search engine, we produce the keyword query: ∼sold ∼homepages ∼manufacturers ∼LCD ∼televisions ("Costco" OR "Costco travel" OR "Costco Wholesale" OR "Price Costco" OR "Costco Wholesale Corp").</p><p>We send the query to a search engine and download the first k websites in the result list. These websites are aggregated to a document corpus, which is used for further processing. Note that we run experiments with varying k and studied its influence (see Section IV).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Entity Extraction and Relation Finding</head><p>Similar to <ref type="bibr" coords="3,108.60,446.67,12.78,9.50" target="#b0">[1]</ref> our system employs a commercial fact extraction framework, namely the SAP BusinessObjects XI Text Analysis system. In order to extract possible relations, i.e., the occurrence of a source entity together with the predefined target entity type, we construct an extraction rule for each topic that is denoted as CANDIDATE rule in Listing 3. The rule shall extract the sentences where the source entity occurs, together with potential target entities in its context. The CANDIDATErule combines three other rules (see Listing 3):</p><p>Source: The source entity and the most popular alternative names are encoded in the SOURCE-rule to recognize the source entity. For topic 40 as shown in Listing 1, we include Costco (where • denotes a token) and the alternative names of "Costco" such as Costco travel and Costco Wholesale Corp . The respective tokens of one (alternative) name may occur in different order in a sentence.</p><p>Target: The TARGET-rule captures the predefined target entity type. We leverage a subset of the 35 predefined key entity types and map them to entity types that are addressed in the REF-task. In Listing 1 [TE ORGANIZATION] +[/TE] (where the [TE]-tag describes the reference to a predefine entity type of the extraction framework) targets the entity type "organization'. The underlying general purpose rules, e.g, for ORGANIZA-TION, were developed by a team of linguists and shipped with the fact extraction framework.</p><p>Context: The most relevant terms from the narrative relation description are encoded in the CONTEXT-rule. Therefore, we consider each token that occurs within a noun or verb group in the narrative. To support a broader range of linguistic variations, our system embeds the stemmed tokens into stem-tags. Thus, the CONTEXT-rule fires if at least one token shares the same stem with a relevant token of the narrative query.</p><p>The CANDIDATE-rule combines the previously described rules in one statement. Thus, we extract each paragraph that contains at least a word group as defined in the SOURCE-rule, the target entity type (see TARGETrule), and at least one token from the CONTEXT-rule.</p><p>For each document we extract the paragraphs (i.e., the facts consisting of SOURCE, TARGET, and CONTEXT) that might fulfill the selection criteria as described in the user query. In the following we denote the sentence in the paragraph that contains the source entity as c (candidate sentence). We further define a proximity threshold for target entities (distance in sentences to c) that are treated as potentially related. Other entities of the specified target type are ignored. For entities that occur in the left context of c we define a threshold of t pre = 1 and for subsequent entities a threshold of t succ = 3. In general we assume t pre &lt; t succ , because it is more likely that a related entity occurs in the right context of c. For ranking entities, we keep the name of the target entities, the distances to a candidate sentence and the rank of the document in the corpus.</p><p>Note that the information extraction system also supports co-reference resolution. Thus, we may extract for instance the most likely person, that is referred for instance by "he" based on the linguistic structure of a text. The information extraction system returns in such cases the most likely alias in the context (e.g., the person name).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Deduplication and Ranking of Entities</head><p>Having extracted all possible candidate facts, our system merges duplicated target entities and scores duplicate groups. To identify potential duplicates, we combine the Jaccard and Jaro-Winkler similarity (see <ref type="bibr" coords="3,500.18,700.33,11.50,9.50" target="#b1">[2]</ref>). The Jaccard similarity is a token-based vector-space similarity, #group CANDIDATE (scope="Paragraph"): [UL]%(Target),%(Source),(%(Context))[/UL] #group SOURCE (scope="Sentence"): (&lt;Costco&gt;|&lt;Costco&gt;&lt;travel&gt;|&lt;Costco&gt;&lt;Wholesale&gt;&lt;Corp&gt;|..) #group TARGET (scope="Sentence"): [TE ORGANIZATION]&lt;&gt;+[/TE] #group CONTEXT (scope="Sentence"): (&lt;STEM:sold&gt;|&lt;STEM:LCD&gt;|&lt;STEM:manufacturer&gt;|..) Listing 3: Simplified Extraction Rule for Topic 40 while the Jaro-Winkler similarity is a character-based edit distance, which was especially designed for name matching tasks since it punishes errors at the ending of strings less than at the beginning. The combination was necessary, because we realized that, e.g., Jaccard performed well for organizations, but caused many false negatives for certain person names. In turn, Jaro-Winkler caused many false positives for entities of type organization but is suited well for persons.</p><p>In order to combine the advantages of both similarity metrics, we aggregate them as follows: Let jac(ε 1 , ε 2 ) be the Jaccard similarity and jar(ε 1 , ε 2 ) the Jaro-Winkler similarity between two potential target entities ε 1 and ε 2 . Thus we compute their similarity sim(ε 1 , ε 2 ) by their average as:</p><formula xml:id="formula_0" coords="4,88.34,383.46,211.68,24.43">sim(ε 1 , ε 2 ) = jac(ε 1 , ε 2 ) + jar(ε 1 , ε 2 ) 2<label>(1)</label></formula><p>Our system starts with an arbitrary entity ε in the result list, creates a duplicate group E by testing the set of not yet processed entities. It recursively extends E to determine the transitive closure of ε with respect to sim(ε 1 , ε 2 ). The procedure proceeds until every entity is assigned to a duplicate group. For each group E of entities we select the longest name from its assigned instances as its representative.</p><p>Our scoring algorithm works as follows: Let dist(ε, c) be the distance in sentences between a target entity ε relative to a candidate sentence c. Having identified potential duplicates, the scoring algorithm computes weights for each duplicate group E with respect to a document d as:</p><formula xml:id="formula_1" coords="4,59.70,622.06,240.32,33.93">s(E, d) = max (ε∈d,E) t max dist -|dist(ε, c)| + 1 t max dist + 1 ,<label>(2)</label></formula><p>where t max dist = t pre for dist(ε, c) &lt; 0 (occurrences in the left context of c) and t max dist = t succ for dist(ε, c) ≥ 0 (occurrences in the right context). As result of the assumption t pre &lt; t succ , we obtain lower scores for preceding entities than for succeeding ones.</p><p>To aggregate entity scores across the document corpus D, we consider the rank position k d of a document d and compute:</p><formula xml:id="formula_2" coords="4,340.15,233.84,222.88,21.43">s(E, D) = d∈D s(E, d) • log(|D| -k d + 1),<label>(3)</label></formula><p>where log(|D| -k + 1) ensures that potential target entities that occur in documents with a lower k are preferred over entities occurring at a higher k, because they are more likely to be relevant.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Homepage retrieval</head><p>The REF task also requires to output the primary homepages of the encountered entities: "A primary homepage is devoted to and in control of the entity" <ref type="bibr" coords="4,547.51,372.05,11.64,9.50" target="#b2">[3]</ref>. Our approach to primary homepage retrieval first queries one of the employed commercial search engines for a set of homepage candidates by extracting the items from the search engine's result list. Those candidates are ranked by matching their URLs, titles, and snippets <ref type="foot" coords="4,507.87,436.90,3.84,6.65" target="#foot_0">1</ref> against the information about the entity. The ranking function works by extracting 17 features from the candidate homepage into a feature vector f = (f 1 , .., f 17 ) and then applying configurable weights to the features. We designed a genetic algorithm <ref type="bibr" coords="4,396.58,505.40,12.78,9.50" target="#b3">[4]</ref> in order to find the best weight vector w = (w 1 , .., w 17 ) for each search engine.</p><p>Homepage candidate retrieval: The initial candidate set is retrieved by simply querying for the entity name. The set is then expanded by issuing more queries that are different for each search engine. To address those differences we use a source-specific ranking: If a candidate has been retrieved in another way than a simple query against the main search engine, it is marked with a flag f n that is later being evaluated by the ranking. Flagging a candidate means setting the respective feature to f n = 1.</p><p>Set expansion for all search engines: For each candidate that is a Wikipedia page, we load the Wikipedia page and extract all outgoing links that do not point to Wikipedia. Those outgoing links are added as candidates as well and are flagged as having Wikipedia as their origin (f 1 ). The feature "is a Wikipedia page" is discussed later on. Such a page should score less because Wikipedia pages should never be classified primary homepages.</p><p>After applying the following search engine specific set enlargement operations, for each candidate URL we add the shorter forms of the URLs to the candidates by repeatedly removing subpaths from the end of the URL.</p><p>Set expansion for Google was done by using special search operators. Each page related 2 to a Wikipedia candidate page was included in the set, being flagged with f 2 . Furthermore, we queried for:</p><p>• allintitle operator with entity name (feature f 3 ) • allinanchor operator with entity name OR (entity name + narrative) (f 4 ) • feature:homepage operator with entity name (f 5 ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Set expansion specific to Yahoo was implemented by additionally querying for</head><p>• in-title operator with entity name OR (entity name + narrative) (f 3 ) • feature:homepage operator and entity name (f 5 ). Bing also offers a set of special search operators, but we did not make use of them due to time constraints.</p><p>We deduplicated the candidate set by hashing the normalized URLs and concatenating all values (homepage title and snippet) and features to a single candidate.</p><p>Ranking the homepage candidate set: For each homepage candidate a set of 17 features is extracted into a feature vector. A vector of the same size contains the weights for each of these features. The feature vector is made up of the following items:</p><p>• f 1 to f 5 : Source-specific flags (see above) • f 6 : length of URL subpath • f 7 : snippet or title contain the keywords "official site", "company website" or "official website" • f 8 : rank from source search engine result list • f 9 : candidate is Wikipedia site, which decreases the score • f 10 entity name contained in URL • f 11 entity name contained in title • f 12 : Jaccard index of trigrams between entity (entity name, narrative, expanded query 3 ) and homepage 2 Google query: "related:http://en.wikipedia.org/wiki/Articlename" 3 expanded query for document retrieval (defined in Section III-A) (title, hostname, snippet) • f 13 : reciprocal Levenshtein distance between entity name and homepage hostname • f 14 : Jaccard index of bigrams between entity name and homepage hostname • f 15 : Jaccard index of trigrams between entity (entity name, narrative) and homepage (title, snippet) • f 16 : Jaccard index of trigrams between entity name and the entire homepage URL • f 17 : Jaccard index of terms between entity (entity name, narrative, expanded query) and homepage (title, host, snippet) Once a feature vector for a candidate homepage has been determined, each feature value is multiplied with the corresponding weight of the weight vector of the selected search engine, to calculate the final score s(p) for candidate page p:</p><formula xml:id="formula_3" coords="5,394.44,290.00,168.59,31.85">s(p) = 17 i=1 (f i • w i )<label>(4)</label></formula><p>The candidate page p with the highest score s(p) is selected to be the primary homepage.</p><p>Tuning the homepage ranking with a genetic algorithm: The individual importance of the features above is not obvious. For this reason, a genetic algorithm was employed to find the best weight vector for each search engine. The genetic algorithm is initialized with a set of randomly created weight vectors that are constantly modified by mutation and recombination and evaluated by a fitness function. The poorest weight vectors are removed at the end of each iteration (selection).</p><p>Mutation is used to slightly modify weight vectors in order to climb up a (potentially local) maximum. Weight vectors are modified by slightly increasing or decreasing all their values by different random values.</p><p>Recombination means to combine good solutions in order to merge them into a better one, taking advantage of the "good parts" of both. As the best recombination method is unknown, we randomly selected one of the following three methods, to derive a new weight vector w from two given vectors a and b:</p><formula xml:id="formula_4" coords="5,349.82,618.96,213.22,10.63">crossing: a × 9 b = (a 1 , .., a 8 , b 9 , .., b 17 )<label>(5)</label></formula><p>The cutting index 9 was intuitively selected and might not be the best choice.</p><p>interweaving:</p><formula xml:id="formula_5" coords="5,410.68,669.56,152.36,10.63">a b = (a 1 , b 2 , .., b 16 , a 17 )<label>(6)</label></formula><p>averaging:</p><formula xml:id="formula_6" coords="5,389.63,700.73,173.41,24.43">a • b = a 1 + b 1 2 , .., a 17 + b 17 2 (7)</formula><p>To determine the quality of a weight vector w the genetic algorithm uses as fitness function the mean reciprocal rank (MRR) that was derived using a training data set. Let k(w, ε, p) be the rank position of a Web page p within a list of ranked pages, obtained using the target entity, denoted as ε, and a weight vector w. For a training set T = {(ε, h)} containing a set of pairs of target entitiy ε and correct homepage h, the MRR is given by</p><formula xml:id="formula_7" coords="6,82.61,186.18,217.41,29.26">MRR(w, T ) = (ε,h)∈T 1 k(w, ε, h) • 1 |T | (8)</formula><p>As T , we used a handcrafted test set of 30 target entities and their "correct results". We ran the genetic algorithm until it could not find a better weight vector w within certain time constraints.</p><p>Learned weight vectors: The genetic algorithm yielded weight vectors with the following MRRs: Google 0.87; Yahoo: 0.80; Bing: 0.82. Note that for Bing, no vector better than the Google vector was discovered after a processing time of 24 hours. A longer time might have lead to a better weight vector. Figure <ref type="figure" coords="6,261.44,344.03,5.48,9.50">2</ref> shows the differences between the best Yahoo and the Google vector.</p><p>Fig. <ref type="figure" coords="6,65.93,528.05,3.36,7.77">2</ref>. Differences between best weight vectors for different search engines. The Google weight vector relies on operators (f1 to f5), while the Yahoo setting makes more use of text similarity (f12 to f17). The prominent feature f15 is the trigram Jaccard index (see <ref type="bibr" coords="6,286.58,559.43,10.08,7.77" target="#b1">[2]</ref>) of homepage snippet, title and entity name, narrative concatenated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. EVALUATION</head><p>During the development of our system we used topics from 2009 to determine which parameters settings could perform the best for TREC 2010 queries. In this section we will focus on the final results of our system in TREC 2010.</p><p>The two basic configuration parameters for tuning our system are the selection of the Web search engineused for retrieving a document corpus and homepage candidates -and the number of retrieved documents, which determines the size of the corpus. The search engines we used were Google (G), Bing (B), and Yahoo (Y). We varied the number of retrieved documents from 8 to 128. We obtained the best results for Google with 16 documents (denoted as G16). For the remaining search engines a configuration with 64 documents turned out to be more precise. Thus, we also submitted runs for Y64 and B64, and for comparison G64.</p><p>The main performance measures in TREC 2010 are normalized discounted cumulative gain (nDCG) and precision at 10 (P10). In addition, the evaluation script provided numbers for the mean average precision (MAP) and R-precision (Rprec). The average results of the submitted runs are shown in Table <ref type="table" coords="6,474.89,365.40,3.19,9.50">I</ref>. The results show that Google provides more accurate results in the first items of the result list. Thus G16 outperforms G64, because the latter returned more non-relevant documents, which harm precision. For the other search engines a higher number of documents is required to achieve an acceptable recall. However, even compared to G64 a significantly higher amount of less relevant documents is contained in their result sets.</p><p>In Figure <ref type="figure" coords="6,373.85,486.19,5.48,9.50" target="#fig_3">3</ref> we show the results of the different configurations for each topic from 2010 (topic 21 to topic 70). In general, we observed that our system performs better for finding related persons than for other entity types. The reason is that our system does not use domain dictionaries, e.g., generated from Wikipedia. Thus, for instance domain specific location names are often missed, while more general but less relevant ones, such as "South Pacific", are extracted and harm precision.</p><p>Another problem, that was detected after official submission, was a bug in keyword query generation. This bug dropped some relevant key words from the narrative query. Therefore, we show the results of the fixed G16configuration in comparison to the the submitted G16results in Figure <ref type="figure" coords="6,385.52,687.00,4.11,9.50">4</ref>. Furthermore, Figure <ref type="figure" coords="6,487.67,687.00,5.48,9.50">4</ref> depicts the best and median results of the competing systems in 2010. It shows that the bugfix led to a significant improvement for topics with extremely long narrative queries. The results for the other configurations improved in a similar way, but showed -compared to each other -a similar behavior as shown in Figure <ref type="figure" coords="7,138.91,406.20,4.11,9.50" target="#fig_3">3</ref>.</p><p>The performance was not the focus of our system. However, it has to be mentioned that the runtime processing of documents leads to huge overhead (as opposed to annotating the whole clueweb corpus in advance). Thus the time to process a single topic with a configured corpus size of 16 was about 2 minutes (without any parallelization). The system spends most of the time in the deduplication phase and the mapping from real URLs to clueweb ids.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. DISCUSSION AND RESEARCH DIRECTIONS</head><p>In the following we discuss observations with respect to our system when running the 2010 topics and elaborate on potential extensions of our approach.</p><p>Query processing and document retrieval. The first crucial part of our system is the query preprocessing step. In general, our query preprocessing seems to perform well to formulate a keyword query that returns relevant documents.</p><p>We realized in particular that some Web search engines seem to take into account the position of a token in the keyword query to determine the relevance of documents. Thus changing a token at the last position of the keyword query has little influence on the candidate documents, while changing the first token has a huge impact. Therefore, at least a filtering of the narrative query is crucial to narrow the set of tokens. Reordering tokens might further improve the relevance of retrieved documents, e.g., by a metric to determine semantic relatedness <ref type="bibr" coords="7,364.50,446.21,12.78,9.50" target="#b4">[5]</ref> to the source entity.</p><p>We propose two more potential extensions for our query processing component. First, we realized that some topics, e.g., topics 37 and 44 contained a selection predicate for time ("in December 2008", "during June 2008"). A special treatment of those predicates may further improve performance, e.g., by generating alternative representations. Next, some topics contained semantic type information or entities, such as topic 21 ("art galleries in Bethesda, Maryland"), topic 22 ("countries"), topic 30 ("U.S. states and Canadian provinces") or topic 35 ("companies"). Parsing them, e.g., by using the semantic categories defined in Wikipedia, and reusing this information in the extraction phase promises a higher accuracy.</p><p>Entity extraction. Our system performs particularly well for queries that aim to find related persons. The reason is that there is common understanding of the semantic type "person". For locations, organizations, and products the treatment of the semantic type is more subjective. For instance, topic 21 asks for locations that Fig. <ref type="figure" coords="8,127.35,329.55,3.36,7.77">4</ref>. nDCG comparison of official G16-run / bugfixed G16-run to competing systems in TREC 2010 are specified as "art galleries in Bethesda, Maryland". While our system retrieves documents that may answer the query, it misses all relevant entities, because our system classified occuring art galleries as "organization", but the T ARGET rule (see Section III-B) is configured with the entity types for locations.</p><p>The above example is only one case where our mapping from the location entity type to the predefined entity types of the employed extraction system lowered the performance of the overall system. For instance, we mapped the "location" entity type also to the entity type "regions" of the employed extraction system (e.g., "South Pacific"). Regions often outperformed cities or countries in the ranking phase. A more careful mapping and a relevance scoring for entity sub-types promises better accuracy.</p><p>Considering entity sub-types, we may also leverage entity types that can be extracted from narrative queries. Having extracted from the query that the expected subtype of "organization" is "university" or "company", the extraction can be narrowed to those types as they are also available in the extraction framework.</p><p>Deduplication and ranking. The deduplication and ranking mechanisms perform quite well. However, our ranking scheme considers only statistics from the narrowed document corpus, which was acquired via a keyword query. Thus, it captures for each candidate the proximity of the source and potential target entity, and implicitly the number of occurrences and the relevance of a document. Another potential, quite simple (but time consuming) solution would be to query a Web search engine with source and target entity together with the narrative query to also include global statistics. In order to achieve reasonable processing times, we did not apply such statistics.</p><p>Homepage retrieval. We made extensive use of the Google operators, so the Google weight vector especially relies on them. If they are not available, the importance of textual similarity measures increases, with Jaccard index being clearly preferred over Levenshtein distance. The use of Bing's special search operators was not evaluated at all. For further improvement, data like site structure, page content, or inclusion within certain directories (chamber of commerce, phone books) could serve for feature extraction as well. Especially the recombination operator could be adapted to better address this specific problem, for example grouping features using an evolution strategy <ref type="bibr" coords="8,395.09,633.10,11.64,9.50" target="#b5">[6]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. CONCLUSION</head><p>Our entity-centric information retrieval (ECIR) system preprocesses a given topic using part-of-speech tagging and synonym lists on the web in order to create a keyword query. The keyword query is sent to one of three evaluated Web search engines. The documents in the result list are aggregated in a document corpus, which in turn is used for further processing. Based on the preprocessed query an extraction rule is constructed to identify possible target entities. For each document we score each potential target entity by the distance to the source entity. Potential target entities are subjected to a deduplication, resulting in a set of duplicate groups. For each duplicate group, we compute a aggregated score with respect to the document corpus.</p><p>Our homepage retrieval and weighting scheme considers a set of 17 different features for ranking. It also considers special operators of the Web search engines. Interestingly, we observed that a genetic learning algorithm, trained on a small set of examples, weighted textual features, such as the Jaccard similarity between the entities and title, URL, and snippet higher than the source-specific features and special operators. However, we observed that these are extremely valuable to determine candidate pages. We evaluated our system using three different Web search engines and varied the number of documents that were acquired. As a result, we find that our system performs best when it uses Google to retrieve 16 top pages. In this setting our system outperforms the average results that have been achieved by competing systems in TREC 2010. For some topics such as topic 24 and 54 our system outperforms the average results by far and achieves the same nDCG as the best performing system in TREC 2010.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0" coords="1,311.97,499.36,37.66,6.31;1,311.97,509.82,80.70,6.31;1,311.97,520.28,188.29,6.31;1,311.97,530.74,252.85,6.31;1,311.97,541.20,242.09,6.31;1,311.97,551.66,247.47,6.31;1,311.97,562.12,236.71,6.31;1,311.97,572.59,43.04,6.31;1,338.87,592.66,197.27,9.50"><head></head><label></label><figDesc>&lt;query&gt; &lt;num&gt; 40 &lt;/num&gt; &lt;entity_name&gt; Costco &lt;/entity_name&gt; &lt;entity_URL&gt; cw09-en0006-60-20817 &lt;/entity_URL&gt; &lt;target_entity&gt; organization &lt;/target_entity&gt; &lt;narrative&gt; Find homepages of manufacturers of LCD televisions sold by Costco. &lt;/narrative&gt; &lt;/query&gt; Listing 1: Topic 40 from Entity Track 2010</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1" coords="2,48.96,228.09,236.71,6.31;2,48.96,238.55,209.81,6.31;2,91.62,258.62,165.73,9.50"><head></head><label></label><figDesc>40 Q0 cw-en0002-13-22651 1 2.65 G8 Panasonic 40 Q0 cw-en0010-32-35757 2 1.99 G8 Sony Listing 2: Top 2 results for Topic 40</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2" coords="2,125.48,594.05,98.02,7.77"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. System Overview</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3" coords="7,106.49,329.55,399.01,7.77"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Comparison of the official results from TREC 2010 for different configurations per topic (nDCG)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" coords="8,72.75,31.97,463.22,327.73"><head></head><label></label><figDesc></figDesc><graphic coords="8,72.75,31.97,463.22,327.73" type="bitmap" /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0" coords="4,324.43,704.50,238.60,7.77;4,311.97,714.96,139.61,7.77"><p>Snippets are the short summaries that search engines output along with the URLs of their search results.</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct coords="9,327.91,165.95,235.13,7.77;9,327.91,176.41,235.13,7.77;9,327.91,186.72,235.12,7.93;9,327.91,197.18,187.05,7.93" xml:id="b0">
	<analytic>
		<title level="a" type="main" coord="9,478.88,165.95,84.15,7.77;9,327.91,176.41,235.13,7.77;9,327.91,186.87,24.11,7.77">Improving information quality in email exchanges by identifying entities and related objects</title>
		<author>
			<persName coords=""><forename type="first">M</forename><surname>Kowalkiewicz</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">K</forename><surname>Juenemann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m" coord="9,372.31,186.72,190.72,7.72;9,327.91,197.18,116.82,7.72">Proceedings of the CIKM workshop on Information credibility on the web (WICOW)</title>
		<meeting>the CIKM workshop on Information credibility on the web (WICOW)</meeting>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="81" to="84" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,327.91,207.80,235.13,7.77;9,327.91,218.26,235.13,7.77;9,327.91,228.57,235.13,7.72;9,327.91,239.03,139.19,7.93" xml:id="b1">
	<analytic>
		<title level="a" type="main" coord="9,535.81,207.80,27.22,7.77;9,327.91,218.26,217.89,7.77">A comparison of string distance metrics for name-matching tasks</title>
		<author>
			<persName coords=""><forename type="first">W</forename><forename type="middle">W</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">P</forename><forename type="middle">D</forename><surname>Ravikumar</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">S</forename><forename type="middle">E</forename><surname>Fienberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m" coord="9,327.91,228.57,235.13,7.72;9,327.91,239.03,70.08,7.72">Proceedings of the IJCAI Workshop on Information Integration on the Web (IIWeb)</title>
		<meeting>the IJCAI Workshop on Information Integration on the Web (IIWeb)</meeting>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="73" to="78" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,327.91,249.64,235.13,7.77;9,327.91,260.10,235.13,7.77;9,327.91,270.56,159.62,7.77" xml:id="b2">
	<monogr>
		<title level="m" type="main" coord="9,331.92,249.64,231.11,7.77;9,327.91,260.10,77.41,7.77">Trec entity track guidelines -searching for entities and properties of entities</title>
		<ptr target="http://ilps.science.uva.nl/trec-entity/files/trec2010/TRECEntity2010guidelines.pdf" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct coords="9,327.91,280.87,235.12,7.93;9,327.91,291.33,162.85,7.93" xml:id="b3">
	<monogr>
		<author>
			<persName coords=""><forename type="first">D</forename><forename type="middle">E</forename><surname>Goldberg</surname></persName>
		</author>
		<title level="m" coord="9,387.35,280.87,175.68,7.72;9,327.91,291.33,65.60,7.72">Genetic Algorithms in Search, Optimization, and Machine Learning</title>
		<imprint>
			<publisher>Addison-Wesley</publisher>
			<date type="published" when="2007">2007</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,327.91,301.94,235.13,7.77;9,327.91,312.40,235.13,7.77;9,327.91,322.71,235.13,7.93;9,327.91,333.17,169.09,7.93" xml:id="b4">
	<analytic>
		<title level="a" type="main" coord="9,350.00,312.40,213.03,7.77;9,327.91,322.86,27.21,7.77">Using Google distance to weight approximate ontology matches</title>
		<author>
			<persName coords=""><forename type="first">R</forename><surname>Gligorov</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">W</forename><surname>Kate</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Z</forename><surname>Aleksovski</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">F</forename><surname>Van Harmelen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m" coord="9,379.44,322.71,183.60,7.72;9,327.91,333.17,89.56,7.72">Proceedings of the International Conference on World Wide Web (WWW)</title>
		<meeting>the International Conference on World Wide Web (WWW)</meeting>
		<imprint>
			<date type="published" when="2007">2007</date>
			<biblScope unit="page" from="767" to="776" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="9,327.91,343.63,235.13,7.93;9,327.91,354.25,20.17,7.77" xml:id="b5">
	<monogr>
		<author>
			<persName coords=""><forename type="first">I</forename><surname>Rechenberg</surname></persName>
		</author>
		<title level="m" coord="9,385.15,343.63,173.70,7.93">Evolutionsstrategie &apos;94. Frommann Holzboog</title>
		<imprint>
			<date type="published" when="1994">1994</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
