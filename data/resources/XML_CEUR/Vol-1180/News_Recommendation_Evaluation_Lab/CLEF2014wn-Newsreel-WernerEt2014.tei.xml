<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main" coord="1,162.42,115.90,290.52,12.90;1,217.43,133.83,180.50,12.90">Optimizing and Evaluating Stream-based News Recommendation Algorithms</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName coords="1,215.17,171.88,69.75,8.64"><forename type="first">Sebastian</forename><surname>Werner</surname></persName>
							<email>sebastian.werner@campus.tu-berlin.de</email>
							<affiliation key="aff0">
								<orgName type="department">Database Systems and Information Management Group</orgName>
								<orgName type="institution">DIMA Technische Universität Berlin</orgName>
								<address>
									<addrLine>Einsteinufer 17</addrLine>
									<postCode>D-10587</postCode>
									<settlement>Berlin</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName coords="1,308.76,171.88,87.16,8.64"><forename type="first">Andreas</forename><surname>Lommatzsch</surname></persName>
							<email>andreas.lommatzsch@tu-berlin.de</email>
							<affiliation key="aff1">
								<orgName type="laboratory">Agent Technologies in Business Applications and Telecommunication Group</orgName>
								<orgName type="institution">AOT Technische Universität Berlin</orgName>
								<address>
									<addrLine>Ernst-Reuter-Platz 7</addrLine>
									<postCode>D-10587</postCode>
									<settlement>Berlin</settlement>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main" coord="1,162.42,115.90,290.52,12.90;1,217.43,133.83,180.50,12.90">Optimizing and Evaluating Stream-based News Recommendation Algorithms</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">3E886068705762FBDB0E52AFFACB5284</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-06-26T15:38+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Due to the overwhelming amount of items and information users need support in finding the information matching the individual preferences and expectations. Real-time stream-based recommender systems get in the focus of research allowing the adaption of recommendations to the user's context and the current set of relevant items. In this paper we focus on recommending news articles. In contrast to most traditional recommender systems, our system must handle several additional challenges: News articles have a short lifecycle forcing the recommender system to continuously adapt to the set of news articles. In addition, the recommender algorithms should work efficiently: On the one hand, news recommendations must be provided within milliseconds since the recommendations must be embedded in news article pages. On the other hand, the news algorithms must be able to handle a huge amount of recommendation request in order to process load peaks without violating the time constraints. We present algorithms optimized for providing real-time news recommendation given limited hardware resources. We present an offline evaluating framework allowing us the efficient optimizing of recommender algorithms taking into account the available hardware resources. The evaluation shows that our approach allows us to find optimal recommender algorithms for a given hardware setting.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<facsimile>
		<surface n="1" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="2" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="3" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="4" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="5" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="6" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="7" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="8" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="9" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="10" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="11" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
		<surface n="12" ulx="0.0" uly="0.0" lrx="612.0" lry="792.0"/>
	</facsimile>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The overwhelming amount of news available in the internet makes it difficult for the user to find information making it difficult for the user to find articles matching the individual preferences and interests. Recommender systems address this problem by filtering the huge amount of data and suggesting the most relevant information according to the user's preferences <ref type="bibr" coords="1,184.36,572.75,10.79,8.64" target="#b4">[5]</ref>. Recommending web-news articles differs from "traditional" product recommendation scenario in several aspects: News articles have a short life cycle forcing the recommender to continuously consider new articles and to discard outdated articles. Users are interested in several different topics and domains making it hard to predict the relevance articles in a new domain. Unexpected events may be relevant for a user even though no similar event has been observed in the past <ref type="bibr" coords="1,350.06,632.53,10.58,8.64" target="#b2">[3]</ref>.</p><p>From the perspective of the recommender system provider, there are high demands according to the scalability of the recommender algorithms. The systems must be able to handle a large number of news articles, item updates and requests ensuring a very short response time for delivering recommendation results. Since users tend to read online articles especially in the morning and during the lunch break but not at night, there is high variance in the number of requested recommendations over a typical day. This requires special effort to guarantee quick responses also during the load peak hours of the day <ref type="bibr" coords="2,166.31,179.09,10.58,8.64" target="#b8">[9]</ref>.</p><p>In this paper we suggest several recommender algorithms tailored for the news recommendation scenario. The algorithms are optimized for delivering high-quality news recommendations even if only limited computing resources are available. For proving the efficiency of our algorithm, we implemented a framework for evaluating news recommender algorithms. This framework allows us optimizing the algorithms for typical news recommendation scenarios and pre-defined hardware resources.</p><p>The remaining paper is structured as follows: In Section 2, we give an overview on related work. The problem description and the addressed challenges are explained in Section 3. Our approach is presented in Section 4. Subsequently, the evaluation results are discussed in Section 5. We conclude with a view on future work in Section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>There is a big variety of domains in which recommender systems are used <ref type="bibr" coords="2,445.08,357.02,10.79,8.64" target="#b0">[1]</ref>. This section presents two systems tailored to recommend news articles and videos content. These systems have been selected because both systems are optimized for handling a huge number of requests and do not require an exact identification of users. We discuss the approaches used by the portal REDDIT and YOUTUBE and explain how the algorithms can be adapted for our news recommendation scenario.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">reddit</head><p>The internet platform REDDIT <ref type="foot" coords="2,251.12,467.09,3.49,6.05" target="#foot_0">3</ref> gives users the ability to share news articles and comment on them. The portal aggregates the user interactions in order to support users in finding the most interesting articles and comments.</p><p>The portal REDDIT allows users to rate articles by assigning +1 ("up") for interesting or -1 ("down") for boring articles. These votes are evaluated immediately and used for sorting the articles on the website: The most frequently positively voted articles are displayed on top of the page. The top voted news articles can be seen as recommendations computed by the system. The recommendations are similar for all users; individual user preferences are not taken into account. The aggregation of all user votes in one "global" user profile prevents problems with sparse profiles and new users ("cold-start problem"), but limits the recommendation quality.</p><p>In addition to the functionality to vote on articles, REDDIT allows the users to categorize articles. The categorization is used to compute several different lists of recommendations. Based on the categorization, users can focus on news articles related to a particular domain.</p><p>REDDIT is used by millions of users every day. This results in a high number of recommendation requests and article updates. REDDIT is a relevant example of a news recommendation systems which provides an efficient solution for recommending news articles based on some limited computing resources. The used algorithm is simple, but it allows the portal to provide good recommendations without high computational complexity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">YouTube</head><p>YouTube is a popular video portal providing a rich variety of audio and video content. Since YOUTUBE is financed by advertisements, the web portal aims to prolong the time users spend on YouTube. An integrated recommender system suggests the user potentially interesting items trying to give the users the illusion that the web page has been designed according to the individual user preferences. Due to the huge number of users and items, the recommender algorithms must be designed serving a large number of recommendations and to analyze millions of user interactions each hour.</p><p>The YouTube recommender system must be able to cope with several challenges: Video content uploaded by users is often very sparsely annotated with meta-data. In general, users are interested in several different (often only loosely related) topics. In contrast to movie rental or purchase sites (such as Netflix or Amazon), YOUTUBE users do not pay for videos. Therefore, an user-item interaction on YouTube gives a less significant indication of user interests <ref type="bibr" coords="3,303.89,369.94,10.56,8.64" target="#b3">[4]</ref>. The YOUTUBE recommendation engine solves these challenges by analyzing the co-visitation between videos. This approach works well with noisy user profiles and sparsely annotated items since it is based on the user-item interaction statistics. Due to the huge number of users visiting YOUTUBE every hour, this scalable approach provides good recommendations even if limited computational resources are available.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Discussion</head><p>Most traditional recommended systems use item-based or user-based collaborative filtering algorithms <ref type="bibr" coords="3,207.72,489.06,10.79,8.64" target="#b5">[6]</ref>. The approaches enable high quality recommendation results if an appropriate number of user-item relations are available. In general, collaborative filtering algorithms suffer from sparse user-item matrixes and missing data for new users and items. Dimensionality reduction approaches (e.g., based on SVD) or clustering algorithms are frequently used to address these challenges. Since these algorithms are computational expensive, the pre-processing is often computed offline. In news recommendation scenarios characterized by a short item lifecycle and a continuously changing set of items an offline processing results in a delay inappropriate for recommending the most current news articles.</p><p>In scenarios characterized by a frequently changing set of users and items simplified recommender models are used aggregating the profiles from different users in one big, dense profile. Such recommender approaches used by REDDIT and YOUTUBE allow the portals to avoid the cold-start problem as well as to mitigate the lack of sophisticated user tracking capabilities. The low computational complexity of the algorithms, the good recommendation quality the highly aggregated model as well as the ability to provide recommendations for unregistered users are the strengths of the approach. A weakness of the impersonalized recommender approach is that individual preferences are not taken into account. The use of categories (e.g. in REDDIT) attenuates the problem allowing the users to restrict the recommendations to one domain.</p><p>In most recommender scenarios, suggestions must be provided within seconds to ensure a good user experience. The PLISTA news recommendation scenario has much tighter time constrains: The recommendation requests must be answered within 100ms. This limits the complexity of the recommender algorithms. Thus, we focus in our research on robust, efficient algorithms able to guarantee a fast response time even in the daily load peaks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Problem Description</head><p>In this section we discuss the characteristics of the analyzed news recommendation scenario and explain the challenges.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">The analyzed scenario</head><p>We analyze the task of recommending interesting article for a set of news portals. When a user visits a news portal, the news portal sends a recommendation request to the PLISTA server. The PLISTA server delegates the request to a randomly selected recommender algorithm. The PLISTA challenge gives researchers the unique opportunity to test recommender algorithms online in a real-world scenario. The recommendation algorithm selected for handling the request must provide a list of recommendations within 100ms in order to ensure that the recommendations can be embedded into the requested news article. The process is visualized in Fig 1 . In order to support extended offline testing of recommender algorithms, we add an offline test server to the contest architecture. The offline test server is set up by a VAGRANT <ref type="foot" coords="4,381.50,452.69,3.49,6.05" target="#foot_1">4</ref> script and allows us to analyze the performance of recommender algorithms based on user interactions data logged in the past ("replay of logged message streams").</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Dataset analysis</head><p>For the communication between the PLISTA server and the recommender algorithms four types of messages are used:</p><p>Impression: If a user requests a news article or clicks on an article recommendation, the PLISTA server informs all recommender algorithms about the event. In detail, the message contains a unique article ID, a user ID generated by the PLISTA server as well as environment parameters provided by the user's browser. The recommender algorithms do not have to answer impression messages.</p><p>Request: If a recommender algorithm is selected to provide recommendations, the PLISTA server sends a recommendation request. In addition to the data provided in the impression messages, the request defines how many recommendations must be The implemented recommender algorithms communicate with the PLISTA server using the recommender interface in the online evaluation. In order to evaluate recommender strategies offline the PLISTA server can be replaced by an offline testing server controlled by a VAGRANT script. In the offline evaluating log data recorded in the online evaluation are re-played allowing us to evaluate the performance of the recommender algorithms in a reproducible way. The messages as well as the log data are represented as JSON objects due to the fact that JSON is a very flexible data format well supported by web applications.</p><p>provided. Recommendation requests must be answered with the requested number of recommendations within 100ms.</p><p>Item update: If the news portal publishes a new article or if a news article changes, the PLISTA server uses item-update messages to inform the recommender agents. Itemupdate messages do not have to be answered by the recommender agents.</p><p>Error messages: If the recommender agent has not answered a recommendation request correctly, the PLISTA server informs the recommender agent. Potential reasons triggering an error message are timeouts or invalid article IDs in the set of recommended articles.</p><p>Since the news recommendations are provided in real-time for a live system, the amount of messages highly depend on the time of the day and the number of news published on the news portals <ref type="bibr" coords="5,255.45,503.57,10.58,8.64" target="#b1">[2]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">The challenges</head><p>The implementation of a news recommendation system leads to a number of interesting challenges. These challenges range from computational limitations to the quality of available data to the heterogeneity of the news portals <ref type="bibr" coords="5,342.79,572.75,10.37,8.64" target="#b7">[8]</ref>. The quality of data, that PLISTA receives and forwards to the different participants of the open recommendation research platform vary from news portal to news portal. On some sites, users can be identified using cookies and other tracking methods. Other sites do not track user behavior and therefore make it difficult to target specific user interests.</p><p>Since users do not need to log into the news portals, the accuracy of identifying unique users is limited. This makes it difficult for user based methods to acquire comprehensive data to compute highly personalized recommendations. The way user tracking is implemented on news portals makes it difficult to recognize a user when the user returns to a news portal. Fig. <ref type="figure" coords="6,221.97,131.27,5.04,8.64" target="#fig_1">2</ref> shows the number of impressions for uniquely identified users. The graph shows that most users could only be identified once or twice.  An additional challenge for learning a powerful recommendation strategy is the high variance in the user behavior. In contrast to shopping portals offering relatively expensive products, the consumption of news articles is driven by reported events, the mood of the user and the particular context (e.g., the time of the day). Since it is difficult to predict the events about which will be reported on the news portals, learning a powerful recommendation algorithm is a big challenge.</p><p>From the technical perspective load peaks in the usage of news portals are challenging. Fig. <ref type="figure" coords="6,153.20,451.04,5.03,8.64" target="#fig_2">3</ref> shows the number of impressions in the PLISTA contest in the 3rd week of June. The graph shows that in the morning hours and during the lunch break at working days the highest load can be observed. The minima in the curve describing the number of article requests are reached late at night, when most users sleep.</p><p>In the PLISTA contest a maximal algorithm's response of 100ms the recommender algorithms must be ensured. Due to limited available computational resources, the recommender algorithms must be optimized to meet the time-constraints also during load peaks. An appropriate tradeoff between the quality of the recommendation results and the computational complexity must be found. An extensive testing of the algorithms supports the analysis of the algorithms under heavy load given a pre-defined hardware setting and helps to find the optimal algorithms for a particular scenario.</p><p>The performance of the recommender algorithms is evaluated online based on the click rate. Since the click rate varies with the international news situation and the season making it difficult to reproduce the user behavior. This complicates the fair comparison of several different recommender algorithms. There is a need for an offline testing framework able to repeat pre-recorded streams for measuring different recommender algorithms. A test framework ensures reproducibility of results and speedup the optimization of recommender algorithms. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Approach</head><p>In this section we present our recommender algorithms optimized for the news scenario.</p><p>In the second part of this section we present the implemented testing framework allowing us to evaluate the algorithms on exactly defined hardware.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Recommender Algorithms</head><p>We focus on unpersonalized recommender algorithms. This is based on the observation that the userIDs in the PLISTA contest are noisy (due to insufficient user tracking) and a large number of requests are initiated by new users. We discuss the strength and weaknesses of the implemented algorithm taking into account the recommendation quality and the amount of required resources.</p><p>Most popular News articles read by a large number of users are often interesting for a greater audience. Thus, the most popular articles are often a good recommendation.</p><p>In order to take into account the limited lifecycle of news articles, our most-popular recommender determines the most frequently requested news articles from a pre-defined time window. When a set of recommendations is requested, the recommender determines the most popular news articles based on the user-item interaction statistic from the last hours and returns these articles as recommendations. The idea behind this approach is that users who do not yet know the most popular articles will probably be interested in these articles since they are relevant to almost everyone. However, the algorithms should check, whether the articles have not been seen by the particular user before. An important parameter that must be optimized by the most-popular recommender is the size of the time window in that the articles are seen as potentially relevant. The older an article gets the more likely it becomes that a user has already read that article or the article does not describe the latest state of an event.</p><p>One approach to determine the expected lifetime of an article on a given website is to observe user behavior over a long period of time. The average lifetime of articles in the PLISTA data set lies around 3 hours, but varies between news portal to news portals as well as time of day.</p><p>The REDDIT-like recommender The portal REDDIT allows registered users to explicitly rate news articles. Based on the explicit user feedback and the freshness of the articles a ranking is computed. The strategy used by the portal REDDIT can be adapted for the PLISTA news recommendation contest. Instead of counting the "up" and "down" votes (as it is done by REDDIT) we calculate the popularity of an article based on the number of user requests not followed by another article request in the next 30 seconds. We assume that 30 seconds is the minimal time needed to read an interesting article. In order to compute a list of recommendations, we have to aggregate the freshness and the user-news article interaction statistic. We calculate the popularity rank of an article based on the following function: Let p(a) be the number of readers for article a and t(a) the publication time of the article a. The rank r(a) can then be computed as follows: where P determines the influence that the age of the article has on its rank and T determines how many users have to have read an article before it is considered news worthy <ref type="foot" coords="8,162.48,436.21,3.49,6.05" target="#foot_2">5</ref> .</p><p>Item-to-Item recommendations One approach (that has been utilized when facing a strong variation in user interest) is based on item-based collaborative filtering <ref type="bibr" coords="8,462.87,482.68,15.58,8.64" target="#b9">[10]</ref>. This method is used by AMAZON to predict what kind of items users will buy based on items they have in there virtual shopping baskets <ref type="bibr" coords="8,326.98,506.59,10.37,8.64" target="#b6">[7]</ref>. Item-to-Item filtering computes the relation between different articles based on common properties. Two articles are related, for example if multiple users have read both of them. The algorithm provides a set of related articles for each known article. If a user requests a new article, this approach looks for related articles to the article that the user was reading before and uses the resulting set of articles to recommend new ones. Item-to-Item methods can be used for the news scenario, despite the fact, that they can only be tracked for short periods of time. Instead of calculating the interests of each user and likely articles per user, the Item-to-Item method uses observed user behavior to calculate article relations. This is more efficient than using user based collaborative filtering, since articles have a longer lifetime than user sessions.</p><p>Most recently created Based on the idea, that the most important property of news articles is that the information is "new", we implement a recommender that suggests the most-recently created news articles. The algorithm can be implemented based on a size-bounded list, containing the most recently added news articles. If a recommendation request is received, the recommender returns the first n articles from the head of the list. The main advantage of this algorithm is that it is based on efficient data structures supporting a large number of requests. In addition, there is a high probability that new articles provide information not yet known to the user. A weakness of the recommender strategy is that neither the context nor the individual user preferences are taken into account.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Offline load testing</head><p>In order to analyze how well the recommender algorithms can cope with the tight time constrains in the PLISTA contest, we implement an offline testing framework. The framework simulates the online contest and allows us to assigns predefined resources to each recommender agent. Since the same interface is used in the offline and the online tests the implemented recommender algorithms can be evaluated in both scenarios without changing implemented recommender components. The usage of an offline testing framework allows us defining reproducible test cases resulting in a faster, more agile development of recommender systems. Embedding a recommender into a news portal is certainly a more reliable way to test a system, since it is evaluated by real users under realistic conditions. But online testing takes time and not every recommendation that is calculated is seen by a user. Offline tests allow us an efficient benchmarking of recommender algorithms. Instead of waiting hours for 10,000 recommendation request, an offline test can simulate and evaluate 10,000 requests within minutes.</p><p>The core of our testing framework is implemented using server component which emulates the open recommendation platform from PLISTA. This allows all teams who participate in this challenge to test their solutions with our framework. The server components are VAGRANT and PUPPET scripts used to automatically set up a virtual machine for deploying recommendation components. This allows us to analyze performance characteristics like CPU usage and memory usage of the system for exactly defined test scenarios.</p><p>The measured results describe the recommendation quality, CPU and memory usage of the algorithms for the relevant test cases. The offline tests use log files recorded in the online challenge to simulate the messages from different news portals. The only pre-requisite to the different solutions is that they do not use the identical log files to train or to optimize algorithms to ensure an unbiased assessment.</p><p>The log files are converted to requests and updates that the server can send to the different recommender systems. The log files are split into a set of messages that have already been send to the client and a set of messages that will be send in the future. The set of future messages can be used to evaluate the quality of a recommendation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Testing scenarios</head><p>We analyze three different test scenarios, representing exemplarily three critical situations in handling the message stream in the PLISTA contest.</p><p>Rush Hour: We define a test case analyzing how well the algorithms scale with the number of parallel requests. This test case simulates the traffic that news recommenders have to deal with during rush hours. Fig. <ref type="figure" coords="10,296.72,189.19,4.91,8.64" target="#fig_2">3</ref> shows that news websites experience interest spikes and fluctuations in user interactions. Our first test case simulates the worst case scenario of these spikes and can show how resources are consumed in this scenario.</p><p>Short in RAM: We define a test case analyzing how well the algorithms scale with amount of available RAM. Similar to the previews test case, this test case can also be used to analyze extreme situations. By incrementally increasing the number of parallel requests and messages, the maximal number of simultaneous connections is experimentally determined. In other words, the maximal number of updates and impressions can be computed given a maximal response time per request and a fixed number of resources that can be used in the tests. This helps to determine how efficient data is processed and stored by the tested recommender algorithms.</p><p>Large number of portals: We define a test case analyzing how well the algorithms scale with the number of portals. The more websites a algorithm can handle with the same hardware resources the less money has to be spend to handle more request.</p><p>All tests also evaluate the received recommendations based on prediction acuracy ("click through rate").</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Evaluation</head><p>We evaluated all mentioned recommendation methods as well as a user based approach using our testing framework. Each test scenario was repeated multiple times to ensure meaningful results. We discuss the following properties for each algorithm. Given a recommendation the framework searches through all future user interaction that are presented within the log files and counts how often any user has clicked on the recommended article. We call this count global offline click through rate (ctr). The next criteria checks if the user for whom the recommendation was given will ever read the recommended article in the future. We call this criteria "user-specific offline ctr". Every recommended article that cannot be found in the remaining log file is counted as an invalid result. We compute the accuracy (in percent) for each algorithm based on the three criteria discussed above. Table <ref type="table" coords="10,281.41,548.48,4.98,8.64">4</ref> summarizes the evaluation results.</p><p>A detailed analysis of the amount of required memory in contexts with a large number of requests per second is shown in Fig. <ref type="figure" coords="10,294.19,572.75,3.80,8.64" target="#fig_4">5</ref>. Starting with 1,000 requests per second, we increase the number of request every 10 steps by additional 1,000 requests per second. The measured results show that the MOST RECENTLY CREATED ARTICLE recommender approach has the smallest memory footprint. This algorithm uses an almost constant amount of memory independent from the number of handled requests per second. The amount of memory used by the other three recommender algorithms grows linear with the number of recommendation requests. This can be explained by the memory structures used for storing received requests and impressions. The detailed analysis of the recommender performance and the required amount of resources allows us to determine the optimal recommender algorithm for a specific recommendation scenario. It helps us to find a powerful recommendation strategy running well even if only limited resources are available. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion and Future Work</head><p>In this paper we present and evaluated four different recommender algorithms tailored to the news recommendation scenario. The algorithms have been optimized to provide high-quality recommendation even if only limited resources are available ensuring a fast response time.</p><p>We have implemented a testing framework allowing us to evaluate and optimize the recommendation algorithms offline. The offline evaluation results give us valuable hints for finding optimal parameters settings for critical situations in the online contest (e.g., for handling load peaks). We showed that our framework is capable to predict the resource demands for the recommender algorithms in the analyzed setting. In addition, the presented testing framework supports a more agile development of recommendation algorithms giving us extended options for analyzing our recommender algorithm.</p><p>The implemented framework can be used to test any recommender algorithm in the PLISTA challenge. In addition, the framework can also be used in scenarios in that stream-based algorithms must be optimized on different hardware settings. Each part of the framework has been designed to be flexible configurable and customizable. The use of virtual machines allows us to get interesting insights of resource usage of a system without modifying the physical system. As future work, we plan to extend our framework by adding new quality measures and an support for additional dataformats.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0" coords="5,134.77,273.30,345.97,7.77;5,134.77,284.26,345.82,7.77;5,134.77,295.22,346.13,7.77;5,134.77,306.18,345.82,7.77;5,134.77,317.14,345.97,7.77;5,134.77,328.10,345.60,7.77;5,134.77,339.06,343.68,7.77"><head>Fig. 1 :</head><label>1</label><figDesc>Fig.1:The Figure visualizes the architecture of our system. The implemented recommender algorithms communicate with the PLISTA server using the recommender interface in the online evaluation. In order to evaluate recommender strategies offline the PLISTA server can be replaced by an offline testing server controlled by a VAGRANT script. In the offline evaluating log data recorded in the online evaluation are re-played allowing us to evaluate the performance of the recommender algorithms in a reproducible way. The messages as well as the log data are represented as JSON objects due to the fact that JSON is a very flexible data format well supported by web applications.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1" coords="6,162.91,332.64,289.53,7.77"><head>Fig. 2 :</head><label>2</label><figDesc>Fig. 2: The figure visualizes the number of visits per user of the PLISTA data set.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2" coords="7,134.77,316.07,345.82,7.77;7,134.59,327.03,263.85,7.77"><head>Fig. 3 :</head><label>3</label><figDesc>Fig. 3: This figure shows the web traffic on PLISTA's news portals over the course of one week in June. The data is aggregated based on bins having a length of 15 minutes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3" coords="8,194.29,366.82,71.21,9.65;8,265.64,371.29,7.94,6.12;8,275.74,366.82,117.97,8.74;8,242.23,387.86,81.73,8.74;8,327.38,381.13,92.49,8.74;8,369.73,394.70,6.40,8.74"><head></head><label></label><figDesc>r(a) T,P = log 10 (max (abs (p (a) -T ) , 1.0)) + sign (p (a) -T ) • -currentTime + t (a) P</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4" coords="11,134.77,500.63,345.81,7.77;11,134.77,511.59,345.81,7.77;11,134.77,522.55,200.37,7.77"><head>Fig. 5 :</head><label>5</label><figDesc>Fig.5:The figure shows the memory usage in correspondence to the number of simultaneous request for all tested recommendation methods. The number of simultaneous request was increased by 1,000 for every 10 steps in this rush hour simulation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" coords="6,179.77,180.73,258.84,130.98"><head>number of impressions Users and Impressions</head><label></label><figDesc></figDesc><table coords="6,179.77,199.80,258.84,99.67"><row><cell></cell><cell>1.E+07</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>1.E+06</cell><cell></cell><cell></cell><cell></cell></row><row><cell>number of users</cell><cell>1.E+02 1.E+03 1.E+04 1.E+05</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>1.E+01</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>1.E+00</cell><cell></cell><cell></cell><cell></cell></row><row><cell></cell><cell>1.E+00</cell><cell>1.E+01</cell><cell>1.E+02</cell><cell>1.E+03</cell><cell>1.E+04</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" coords="11,134.49,124.42,347.65,126.07"><head></head><label></label><figDesc>The table gives an overview of the properties of the evaluated recommender algorithms. The evaluation results show the tradeoff between the recommendation quality and the required amount of resources for the analyzed recommender algorithms. The results help us to decide what algorithm is suitable for a new recommendations scenario.</figDesc><table coords="11,134.77,124.42,331.01,93.19"><row><cell>Methodes</cell><cell>user-specific offline CTR</cell><cell>global offline CTR</cell><cell>cpu usage in %</cell><cell>maximum number of simultanius requests</cell><cell>avarage memory usage</cell></row><row><cell>Most-Popular 4</cell><cell>80</cell><cell>11</cell><cell></cell><cell>5000</cell><cell>640</cell></row><row><cell>Reddit 2</cell><cell>87</cell><cell>11</cell><cell></cell><cell>5500</cell><cell>480</cell></row><row><cell>Item -to-Item 8</cell><cell>12</cell><cell>12</cell><cell></cell><cell>1000</cell><cell>800</cell></row><row><cell>Most Recent 8</cell><cell>70</cell><cell>8</cell><cell></cell><cell>6300</cell><cell>400</cell></row><row><cell>User -Based 17</cell><cell>76</cell><cell>100</cell><cell></cell><cell>200</cell><cell>2000</cell></row><row><cell>Fig. 4:</cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="3" xml:id="foot_0" coords="2,144.73,657.93,112.97,6.31"><p>http://www.reddit.com</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="4" xml:id="foot_1" coords="4,144.73,657.93,134.49,6.31"><p>http://www.vagrantup.com/</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="5" xml:id="foot_2" coords="8,144.73,646.13,336.93,7.77;8,144.73,657.93,69.93,6.31"><p>based on https://github.com/reddit/reddit/blob/master/r2/r2/lib/ db/_sorts.pyx</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct coords="12,142.61,306.26,339.54,7.77;12,150.66,317.06,155.50,7.94" xml:id="b0">
	<analytic>
		<title level="a" type="main" coord="12,367.91,306.26,110.56,7.77">Recommender systems survey</title>
		<author>
			<persName coords=""><forename type="first">J</forename><surname>Bobadilla</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">F</forename><surname>Ortega</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">A</forename><surname>Hernando</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">A</forename><surname>Gutiérrez</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j" coord="12,150.66,317.06,65.42,7.73">Know.-Based Syst</title>
		<imprint>
			<biblScope unit="volume">46</biblScope>
			<biblScope unit="page" from="109" to="132" />
			<date type="published" when="2013-07">July 2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="12,142.61,328.18,339.22,7.77;12,150.95,339.14,168.39,7.77" xml:id="b1">
	<monogr>
		<author>
			<persName coords=""><forename type="first">T</forename><surname>Brodt</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">T</forename><surname>Heintz</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">A</forename><surname>Bucko</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">A</forename><surname>Palamarchuk</surname></persName>
		</author>
		<ptr target="http://orp.plista.com/documentation/download" />
		<title level="m" coord="12,337.75,328.18,48.08,7.77">ORP Protocol</title>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="12,142.61,350.10,337.97,7.77;12,150.95,360.90,329.64,7.94;12,150.95,371.85,193.98,7.94" xml:id="b2">
	<analytic>
		<title level="a" type="main" coord="12,439.42,350.10,41.16,7.77;12,150.95,361.06,215.48,7.77">Combining content-based and collaborative filters in an online newspaper</title>
		<author>
			<persName coords=""><forename type="first">M</forename><surname>Claypool</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">A</forename><surname>Gokhale</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">T</forename><surname>Miranda</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">P</forename><surname>Murnikov</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">D</forename><surname>Netes</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">M</forename><surname>Sartin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m" coord="12,383.23,360.90,97.36,7.73;12,150.95,371.85,125.45,7.73">Proceedings of ACM SIGIR workshop on recommender systems</title>
		<meeting>ACM SIGIR workshop on recommender systems</meeting>
		<imprint>
			<date type="published" when="1999">1999</date>
			<biblScope unit="volume">60</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="12,142.61,382.98,339.08,7.77;12,150.95,393.77,329.63,7.94;12,150.95,404.73,299.36,7.94" xml:id="b3">
	<analytic>
		<title level="a" type="main" coord="12,249.75,393.93,159.91,7.77">The YouTube video recommendation system</title>
		<author>
			<persName coords=""><forename type="first">J</forename><surname>Davidson</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">B</forename><surname>Liebald</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">J</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">P</forename><surname>Nandy</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">T</forename><surname>Van</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">U</forename><surname>Vleet</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">S</forename><surname>Gargi</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">Y</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">M</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">B</forename><surname>Lambert</surname></persName>
		</author>
		<author>
			<persName coords=""><surname>Livingston</surname></persName>
		</author>
		<author>
			<persName coords=""><surname>Others</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m" coord="12,426.59,393.77,54.00,7.73;12,150.95,404.73,190.17,7.73">Proceedings of the fourth ACM conference on Recommender systems</title>
		<meeting>the fourth ACM conference on Recommender systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010">2010</date>
			<biblScope unit="page" from="293" to="296" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="12,142.61,415.85,337.96,7.77;12,150.95,426.65,260.48,7.94" xml:id="b4">
	<analytic>
		<title level="a" type="main" coord="12,334.85,415.85,145.73,7.77;12,150.95,426.81,71.80,7.77">Using collaborative filtering to weave an information tapestry</title>
		<author>
			<persName coords=""><forename type="first">D</forename><surname>Goldberg</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">D</forename><surname>Nichols</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">B</forename><forename type="middle">M</forename><surname>Oki</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">D</forename><surname>Terry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j" coord="12,229.39,426.65,101.11,7.73">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="61" to="70" />
			<date type="published" when="1992">1992</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="12,142.61,437.77,339.08,7.77;12,150.95,448.57,331.11,7.94" xml:id="b5">
	<analytic>
		<title level="a" type="main" coord="12,238.64,437.77,119.11,7.77">Advances in collaborative filtering</title>
		<author>
			<persName coords=""><forename type="first">Y</forename><surname>Koren</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">R</forename><forename type="middle">M</forename><surname>Bell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m" coord="12,242.83,448.57,119.12,7.73">Recommender Systems Handbook</title>
		<editor>
			<persName><forename type="first">F</forename><surname>Ricci</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">L</forename><surname>Rokach</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">B</forename><surname>Shapira</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">P</forename><forename type="middle">B</forename><surname>Kantor</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="145" to="186" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="12,142.61,459.69,337.97,7.77;12,150.95,470.48,197.15,7.94" xml:id="b6">
	<analytic>
		<title level="a" type="main" coord="12,304.47,459.69,176.11,7.77;12,150.95,470.65,27.57,7.77">com recommendations: Item-to-item collaborative filtering</title>
		<author>
			<persName coords=""><forename type="first">G</forename><surname>Linden</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">B</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">J</forename><surname>York</surname></persName>
		</author>
		<author>
			<persName coords=""><surname>Amazon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j" coord="12,184.82,470.48,92.21,7.73">Internet Computing, IEEE</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="76" to="80" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="12,142.61,481.44,339.55,7.94;12,150.95,492.40,329.64,7.94;12,150.66,503.36,174.70,7.94" xml:id="b7">
	<analytic>
		<title level="a" type="main" coord="12,214.02,481.61,231.79,7.77">Real-time news recommendation using context-aware ensembles</title>
		<author>
			<persName coords=""><forename type="first">A</forename><surname>Lommatzsch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m" coord="12,462.77,481.44,19.38,7.73;12,150.95,492.40,207.09,7.73">Proc. of the 36th European Conference on Information Retrieval</title>
		<title level="s" coord="12,422.14,492.40,58.46,7.73;12,150.66,503.36,64.03,7.73">Lecture Notes in Computer Science</title>
		<meeting>of the 36th European Conference on Information Retrieval</meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="volume">8416</biblScope>
			<biblScope unit="page" from="51" to="62" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="12,142.61,514.32,339.32,7.94;12,150.95,525.44,33.62,7.77" xml:id="b8">
	<analytic>
		<title level="a" type="main" coord="12,254.07,514.48,79.74,7.77">Recommender systems</title>
		<author>
			<persName coords=""><forename type="first">P</forename><surname>Resnick</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">H</forename><forename type="middle">R</forename><surname>Varian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j" coord="12,340.77,514.32,99.17,7.73">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="56" to="58" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct coords="12,142.24,536.40,339.83,7.77;12,150.95,547.20,330.76,7.94;12,150.95,558.32,78.69,7.77" xml:id="b9">
	<analytic>
		<title level="a" type="main" coord="12,331.47,536.40,150.60,7.77;12,150.95,547.36,76.19,7.77">Item-based collaborative filtering recommendation algorithms</title>
		<author>
			<persName coords=""><forename type="first">B</forename><surname>Sarwar</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">G</forename><surname>Karypis</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">J</forename><surname>Konstan</surname></persName>
		</author>
		<author>
			<persName coords=""><forename type="first">J</forename><surname>Riedl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m" coord="12,234.05,547.20,243.37,7.73">Proceedings of the 10th international conference on World Wide Web</title>
		<meeting>the 10th international conference on World Wide Web</meeting>
		<imprint>
			<date type="published" when="2001">2001</date>
			<biblScope unit="page" from="285" to="295" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
